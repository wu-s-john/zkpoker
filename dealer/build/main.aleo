import room_manager.aleo;
program dealer.aleo;

struct Card:
    rank as u8;
    suit as u8;
    index as u8;

record DealtOneCommunityCard:
    owner as address.private;
    card as Card.private;
    is_turn as boolean.private;
    room_id as u32.private;

record DealtThreeCommunityCards:
    owner as address.private;
    cards as [Card; 3u32].private;
    room_id as u32.private;
    is_next_phase_turn as boolean.private;

struct Deck:
    cards1 as [Card; 26u32];
    cards2 as [Card; 26u32];

struct HouseDealerState:
    room_id as u32;
    deck as Deck;
    next_card_index as u8;
    player_addresses as [address; 4u32];

record HouseDealerStateRecord:
    owner as address.private;
    state as HouseDealerState.private;

record PlayerActionRequest:
    owner as address.private;
    seat_index as u8.private;
    room_id as u32.private;
    nonce as u64.private;
    stack as u64.private;
    contributed as u64.private;
    highest_bet as u64.private;
    main_pot as u64.private;

record PlayerHand:
    owner as address.private;
    hole_cards as [Card; 2u32].private;

struct Permutation:
    perm1 as [u8; 26u32];
    perm2 as [u8; 26u32];

record PlayerProposedShuffle:
    owner as address.private;
    room_id as u32.private;
    seat_index as u8.private;
    seat_owner as address.private;
    dealer_nonce as u64.private;
    perm as Permutation.private;
    player_randomness as scalar.private;

record HouseDealerProposedShuffled:
    owner as address.private;
    perm as Permutation.private;
    room_id as u32.private;
    nonce as u64.private;

record HouseDealerShuffleRequest:
    owner as address.private;
    room_id as u32.private;
    seat_index as u8.private;

struct Player:
    player_address as address;
    stack as u64;
    contributed as u64;
    folded as boolean;
    all_in as boolean;

record GameState:
    owner as address.private;
    num_players as u8.private;
    house_dealer_actor as address.private;
    dealer_seat as u8.private;
    small_blind_seat as u8.private;
    big_blind_seat as u8.private;
    small_blind as u64.private;
    big_blind as u64.private;
    room_id as u32.private;
    current_phase as u8.private;
    community_cards as [Card; 5u32].private;
    players as [Player; 4u32].private;
    nonce as u64.private;
    highest_bet as u64.private;
    main_pot as u64.private;
    active_player_turn_index as u8.private;
    has_acted_this_round as u8.private;

struct PlayerRoomConfig:
    player_address as address;
    bet as u64;

struct RoomConfig:
    big_blind as u64;
    big_blind_seat as u8;
    small_blind as u64;
    small_blind_seat as u8;
    dealer_seat as u8;
    min_stack as u64;
    seats as u8;
    room_id as u32;
    joined_users as [PlayerRoomConfig; 4u32];
    num_joined_users as u8;
    game_state_manager_address as address;

struct KeyValue:
    k as u8;
    v as u8;

struct PermutatedTable:
    perm1 as [KeyValue; 26u32];
    perm2 as [KeyValue; 26u32];

function house_dealer_provide_shuffle:
    input r0 as room_manager.aleo/HouseDealerCreateDeckRequest.record;
    input r1 as Permutation.private;
    input r2 as u32.private;
    cast self.caller r1 r2 0u64 into r3 as HouseDealerProposedShuffled.record;
    cast r0.player_addresses[0u32] r2 0u8 into r4 as HouseDealerShuffleRequest.record;
    cast r0.player_addresses[1u32] r2 1u8 into r5 as HouseDealerShuffleRequest.record;
    cast r0.player_addresses[2u32] r2 2u8 into r6 as HouseDealerShuffleRequest.record;
    cast r0.player_addresses[3u32] r2 3u8 into r7 as HouseDealerShuffleRequest.record;
    output r3 as HouseDealerProposedShuffled.record;
    output r4 as HouseDealerShuffleRequest.record;
    output r5 as HouseDealerShuffleRequest.record;
    output r6 as HouseDealerShuffleRequest.record;
    output r7 as HouseDealerShuffleRequest.record;

closure grand_product_permutation_check:
    input r0 as u64;
    input r1 as u64;
    input r2 as Permutation;
    input r3 as PermutatedTable;
    cast r2.perm1[0u32] into r4 as u64;
    mul 0u64 r0 into r5;
    add r4 r5 into r6;
    add r6 r1 into r7;
    mul 1u64 r7 into r8;
    cast r3.perm1[0u32].v into r9 as u64;
    mul 0u64 r0 into r10;
    add r9 r10 into r11;
    add r11 r1 into r12;
    mul 1u64 r12 into r13;
    cast r2.perm1[1u32] into r14 as u64;
    mul 1u64 r0 into r15;
    add r14 r15 into r16;
    add r16 r1 into r17;
    mul r8 r17 into r18;
    cast r3.perm1[1u32].v into r19 as u64;
    mul 1u64 r0 into r20;
    add r19 r20 into r21;
    add r21 r1 into r22;
    mul r13 r22 into r23;
    cast r2.perm1[2u32] into r24 as u64;
    mul 2u64 r0 into r25;
    add r24 r25 into r26;
    add r26 r1 into r27;
    mul r18 r27 into r28;
    cast r3.perm1[2u32].v into r29 as u64;
    mul 2u64 r0 into r30;
    add r29 r30 into r31;
    add r31 r1 into r32;
    mul r23 r32 into r33;
    cast r2.perm1[3u32] into r34 as u64;
    mul 3u64 r0 into r35;
    add r34 r35 into r36;
    add r36 r1 into r37;
    mul r28 r37 into r38;
    cast r3.perm1[3u32].v into r39 as u64;
    mul 3u64 r0 into r40;
    add r39 r40 into r41;
    add r41 r1 into r42;
    mul r33 r42 into r43;
    cast r2.perm1[4u32] into r44 as u64;
    mul 4u64 r0 into r45;
    add r44 r45 into r46;
    add r46 r1 into r47;
    mul r38 r47 into r48;
    cast r3.perm1[4u32].v into r49 as u64;
    mul 4u64 r0 into r50;
    add r49 r50 into r51;
    add r51 r1 into r52;
    mul r43 r52 into r53;
    cast r2.perm1[5u32] into r54 as u64;
    mul 5u64 r0 into r55;
    add r54 r55 into r56;
    add r56 r1 into r57;
    mul r48 r57 into r58;
    cast r3.perm1[5u32].v into r59 as u64;
    mul 5u64 r0 into r60;
    add r59 r60 into r61;
    add r61 r1 into r62;
    mul r53 r62 into r63;
    cast r2.perm1[6u32] into r64 as u64;
    mul 6u64 r0 into r65;
    add r64 r65 into r66;
    add r66 r1 into r67;
    mul r58 r67 into r68;
    cast r3.perm1[6u32].v into r69 as u64;
    mul 6u64 r0 into r70;
    add r69 r70 into r71;
    add r71 r1 into r72;
    mul r63 r72 into r73;
    cast r2.perm1[7u32] into r74 as u64;
    mul 7u64 r0 into r75;
    add r74 r75 into r76;
    add r76 r1 into r77;
    mul r68 r77 into r78;
    cast r3.perm1[7u32].v into r79 as u64;
    mul 7u64 r0 into r80;
    add r79 r80 into r81;
    add r81 r1 into r82;
    mul r73 r82 into r83;
    cast r2.perm1[8u32] into r84 as u64;
    mul 8u64 r0 into r85;
    add r84 r85 into r86;
    add r86 r1 into r87;
    mul r78 r87 into r88;
    cast r3.perm1[8u32].v into r89 as u64;
    mul 8u64 r0 into r90;
    add r89 r90 into r91;
    add r91 r1 into r92;
    mul r83 r92 into r93;
    cast r2.perm1[9u32] into r94 as u64;
    mul 9u64 r0 into r95;
    add r94 r95 into r96;
    add r96 r1 into r97;
    mul r88 r97 into r98;
    cast r3.perm1[9u32].v into r99 as u64;
    mul 9u64 r0 into r100;
    add r99 r100 into r101;
    add r101 r1 into r102;
    mul r93 r102 into r103;
    cast r2.perm1[10u32] into r104 as u64;
    mul 10u64 r0 into r105;
    add r104 r105 into r106;
    add r106 r1 into r107;
    mul r98 r107 into r108;
    cast r3.perm1[10u32].v into r109 as u64;
    mul 10u64 r0 into r110;
    add r109 r110 into r111;
    add r111 r1 into r112;
    mul r103 r112 into r113;
    cast r2.perm1[11u32] into r114 as u64;
    mul 11u64 r0 into r115;
    add r114 r115 into r116;
    add r116 r1 into r117;
    mul r108 r117 into r118;
    cast r3.perm1[11u32].v into r119 as u64;
    mul 11u64 r0 into r120;
    add r119 r120 into r121;
    add r121 r1 into r122;
    mul r113 r122 into r123;
    cast r2.perm1[12u32] into r124 as u64;
    mul 12u64 r0 into r125;
    add r124 r125 into r126;
    add r126 r1 into r127;
    mul r118 r127 into r128;
    cast r3.perm1[12u32].v into r129 as u64;
    mul 12u64 r0 into r130;
    add r129 r130 into r131;
    add r131 r1 into r132;
    mul r123 r132 into r133;
    cast r2.perm1[13u32] into r134 as u64;
    mul 13u64 r0 into r135;
    add r134 r135 into r136;
    add r136 r1 into r137;
    mul r128 r137 into r138;
    cast r3.perm1[13u32].v into r139 as u64;
    mul 13u64 r0 into r140;
    add r139 r140 into r141;
    add r141 r1 into r142;
    mul r133 r142 into r143;
    cast r2.perm1[14u32] into r144 as u64;
    mul 14u64 r0 into r145;
    add r144 r145 into r146;
    add r146 r1 into r147;
    mul r138 r147 into r148;
    cast r3.perm1[14u32].v into r149 as u64;
    mul 14u64 r0 into r150;
    add r149 r150 into r151;
    add r151 r1 into r152;
    mul r143 r152 into r153;
    cast r2.perm1[15u32] into r154 as u64;
    mul 15u64 r0 into r155;
    add r154 r155 into r156;
    add r156 r1 into r157;
    mul r148 r157 into r158;
    cast r3.perm1[15u32].v into r159 as u64;
    mul 15u64 r0 into r160;
    add r159 r160 into r161;
    add r161 r1 into r162;
    mul r153 r162 into r163;
    cast r2.perm1[16u32] into r164 as u64;
    mul 16u64 r0 into r165;
    add r164 r165 into r166;
    add r166 r1 into r167;
    mul r158 r167 into r168;
    cast r3.perm1[16u32].v into r169 as u64;
    mul 16u64 r0 into r170;
    add r169 r170 into r171;
    add r171 r1 into r172;
    mul r163 r172 into r173;
    cast r2.perm1[17u32] into r174 as u64;
    mul 17u64 r0 into r175;
    add r174 r175 into r176;
    add r176 r1 into r177;
    mul r168 r177 into r178;
    cast r3.perm1[17u32].v into r179 as u64;
    mul 17u64 r0 into r180;
    add r179 r180 into r181;
    add r181 r1 into r182;
    mul r173 r182 into r183;
    cast r2.perm1[18u32] into r184 as u64;
    mul 18u64 r0 into r185;
    add r184 r185 into r186;
    add r186 r1 into r187;
    mul r178 r187 into r188;
    cast r3.perm1[18u32].v into r189 as u64;
    mul 18u64 r0 into r190;
    add r189 r190 into r191;
    add r191 r1 into r192;
    mul r183 r192 into r193;
    cast r2.perm1[19u32] into r194 as u64;
    mul 19u64 r0 into r195;
    add r194 r195 into r196;
    add r196 r1 into r197;
    mul r188 r197 into r198;
    cast r3.perm1[19u32].v into r199 as u64;
    mul 19u64 r0 into r200;
    add r199 r200 into r201;
    add r201 r1 into r202;
    mul r193 r202 into r203;
    cast r2.perm1[20u32] into r204 as u64;
    mul 20u64 r0 into r205;
    add r204 r205 into r206;
    add r206 r1 into r207;
    mul r198 r207 into r208;
    cast r3.perm1[20u32].v into r209 as u64;
    mul 20u64 r0 into r210;
    add r209 r210 into r211;
    add r211 r1 into r212;
    mul r203 r212 into r213;
    cast r2.perm1[21u32] into r214 as u64;
    mul 21u64 r0 into r215;
    add r214 r215 into r216;
    add r216 r1 into r217;
    mul r208 r217 into r218;
    cast r3.perm1[21u32].v into r219 as u64;
    mul 21u64 r0 into r220;
    add r219 r220 into r221;
    add r221 r1 into r222;
    mul r213 r222 into r223;
    cast r2.perm1[22u32] into r224 as u64;
    mul 22u64 r0 into r225;
    add r224 r225 into r226;
    add r226 r1 into r227;
    mul r218 r227 into r228;
    cast r3.perm1[22u32].v into r229 as u64;
    mul 22u64 r0 into r230;
    add r229 r230 into r231;
    add r231 r1 into r232;
    mul r223 r232 into r233;
    cast r2.perm1[23u32] into r234 as u64;
    mul 23u64 r0 into r235;
    add r234 r235 into r236;
    add r236 r1 into r237;
    mul r228 r237 into r238;
    cast r3.perm1[23u32].v into r239 as u64;
    mul 23u64 r0 into r240;
    add r239 r240 into r241;
    add r241 r1 into r242;
    mul r233 r242 into r243;
    cast r2.perm1[24u32] into r244 as u64;
    mul 24u64 r0 into r245;
    add r244 r245 into r246;
    add r246 r1 into r247;
    mul r238 r247 into r248;
    cast r3.perm1[24u32].v into r249 as u64;
    mul 24u64 r0 into r250;
    add r249 r250 into r251;
    add r251 r1 into r252;
    mul r243 r252 into r253;
    cast r2.perm1[25u32] into r254 as u64;
    mul 25u64 r0 into r255;
    add r254 r255 into r256;
    add r256 r1 into r257;
    mul r248 r257 into r258;
    cast r3.perm1[25u32].v into r259 as u64;
    mul 25u64 r0 into r260;
    add r259 r260 into r261;
    add r261 r1 into r262;
    mul r253 r262 into r263;
    add 0u64 26u64 into r264;
    cast r2.perm2[0u32] into r265 as u64;
    mul r264 r0 into r266;
    add r265 r266 into r267;
    add r267 r1 into r268;
    mul r258 r268 into r269;
    cast r3.perm2[0u32].v into r270 as u64;
    mul r264 r0 into r271;
    add r270 r271 into r272;
    add r272 r1 into r273;
    mul r263 r273 into r274;
    add 1u64 26u64 into r275;
    cast r2.perm2[1u32] into r276 as u64;
    mul r275 r0 into r277;
    add r276 r277 into r278;
    add r278 r1 into r279;
    mul r269 r279 into r280;
    cast r3.perm2[1u32].v into r281 as u64;
    mul r275 r0 into r282;
    add r281 r282 into r283;
    add r283 r1 into r284;
    mul r274 r284 into r285;
    add 2u64 26u64 into r286;
    cast r2.perm2[2u32] into r287 as u64;
    mul r286 r0 into r288;
    add r287 r288 into r289;
    add r289 r1 into r290;
    mul r280 r290 into r291;
    cast r3.perm2[2u32].v into r292 as u64;
    mul r286 r0 into r293;
    add r292 r293 into r294;
    add r294 r1 into r295;
    mul r285 r295 into r296;
    add 3u64 26u64 into r297;
    cast r2.perm2[3u32] into r298 as u64;
    mul r297 r0 into r299;
    add r298 r299 into r300;
    add r300 r1 into r301;
    mul r291 r301 into r302;
    cast r3.perm2[3u32].v into r303 as u64;
    mul r297 r0 into r304;
    add r303 r304 into r305;
    add r305 r1 into r306;
    mul r296 r306 into r307;
    add 4u64 26u64 into r308;
    cast r2.perm2[4u32] into r309 as u64;
    mul r308 r0 into r310;
    add r309 r310 into r311;
    add r311 r1 into r312;
    mul r302 r312 into r313;
    cast r3.perm2[4u32].v into r314 as u64;
    mul r308 r0 into r315;
    add r314 r315 into r316;
    add r316 r1 into r317;
    mul r307 r317 into r318;
    add 5u64 26u64 into r319;
    cast r2.perm2[5u32] into r320 as u64;
    mul r319 r0 into r321;
    add r320 r321 into r322;
    add r322 r1 into r323;
    mul r313 r323 into r324;
    cast r3.perm2[5u32].v into r325 as u64;
    mul r319 r0 into r326;
    add r325 r326 into r327;
    add r327 r1 into r328;
    mul r318 r328 into r329;
    add 6u64 26u64 into r330;
    cast r2.perm2[6u32] into r331 as u64;
    mul r330 r0 into r332;
    add r331 r332 into r333;
    add r333 r1 into r334;
    mul r324 r334 into r335;
    cast r3.perm2[6u32].v into r336 as u64;
    mul r330 r0 into r337;
    add r336 r337 into r338;
    add r338 r1 into r339;
    mul r329 r339 into r340;
    add 7u64 26u64 into r341;
    cast r2.perm2[7u32] into r342 as u64;
    mul r341 r0 into r343;
    add r342 r343 into r344;
    add r344 r1 into r345;
    mul r335 r345 into r346;
    cast r3.perm2[7u32].v into r347 as u64;
    mul r341 r0 into r348;
    add r347 r348 into r349;
    add r349 r1 into r350;
    mul r340 r350 into r351;
    add 8u64 26u64 into r352;
    cast r2.perm2[8u32] into r353 as u64;
    mul r352 r0 into r354;
    add r353 r354 into r355;
    add r355 r1 into r356;
    mul r346 r356 into r357;
    cast r3.perm2[8u32].v into r358 as u64;
    mul r352 r0 into r359;
    add r358 r359 into r360;
    add r360 r1 into r361;
    mul r351 r361 into r362;
    add 9u64 26u64 into r363;
    cast r2.perm2[9u32] into r364 as u64;
    mul r363 r0 into r365;
    add r364 r365 into r366;
    add r366 r1 into r367;
    mul r357 r367 into r368;
    cast r3.perm2[9u32].v into r369 as u64;
    mul r363 r0 into r370;
    add r369 r370 into r371;
    add r371 r1 into r372;
    mul r362 r372 into r373;
    add 10u64 26u64 into r374;
    cast r2.perm2[10u32] into r375 as u64;
    mul r374 r0 into r376;
    add r375 r376 into r377;
    add r377 r1 into r378;
    mul r368 r378 into r379;
    cast r3.perm2[10u32].v into r380 as u64;
    mul r374 r0 into r381;
    add r380 r381 into r382;
    add r382 r1 into r383;
    mul r373 r383 into r384;
    add 11u64 26u64 into r385;
    cast r2.perm2[11u32] into r386 as u64;
    mul r385 r0 into r387;
    add r386 r387 into r388;
    add r388 r1 into r389;
    mul r379 r389 into r390;
    cast r3.perm2[11u32].v into r391 as u64;
    mul r385 r0 into r392;
    add r391 r392 into r393;
    add r393 r1 into r394;
    mul r384 r394 into r395;
    add 12u64 26u64 into r396;
    cast r2.perm2[12u32] into r397 as u64;
    mul r396 r0 into r398;
    add r397 r398 into r399;
    add r399 r1 into r400;
    mul r390 r400 into r401;
    cast r3.perm2[12u32].v into r402 as u64;
    mul r396 r0 into r403;
    add r402 r403 into r404;
    add r404 r1 into r405;
    mul r395 r405 into r406;
    add 13u64 26u64 into r407;
    cast r2.perm2[13u32] into r408 as u64;
    mul r407 r0 into r409;
    add r408 r409 into r410;
    add r410 r1 into r411;
    mul r401 r411 into r412;
    cast r3.perm2[13u32].v into r413 as u64;
    mul r407 r0 into r414;
    add r413 r414 into r415;
    add r415 r1 into r416;
    mul r406 r416 into r417;
    add 14u64 26u64 into r418;
    cast r2.perm2[14u32] into r419 as u64;
    mul r418 r0 into r420;
    add r419 r420 into r421;
    add r421 r1 into r422;
    mul r412 r422 into r423;
    cast r3.perm2[14u32].v into r424 as u64;
    mul r418 r0 into r425;
    add r424 r425 into r426;
    add r426 r1 into r427;
    mul r417 r427 into r428;
    add 15u64 26u64 into r429;
    cast r2.perm2[15u32] into r430 as u64;
    mul r429 r0 into r431;
    add r430 r431 into r432;
    add r432 r1 into r433;
    mul r423 r433 into r434;
    cast r3.perm2[15u32].v into r435 as u64;
    mul r429 r0 into r436;
    add r435 r436 into r437;
    add r437 r1 into r438;
    mul r428 r438 into r439;
    add 16u64 26u64 into r440;
    cast r2.perm2[16u32] into r441 as u64;
    mul r440 r0 into r442;
    add r441 r442 into r443;
    add r443 r1 into r444;
    mul r434 r444 into r445;
    cast r3.perm2[16u32].v into r446 as u64;
    mul r440 r0 into r447;
    add r446 r447 into r448;
    add r448 r1 into r449;
    mul r439 r449 into r450;
    add 17u64 26u64 into r451;
    cast r2.perm2[17u32] into r452 as u64;
    mul r451 r0 into r453;
    add r452 r453 into r454;
    add r454 r1 into r455;
    mul r445 r455 into r456;
    cast r3.perm2[17u32].v into r457 as u64;
    mul r451 r0 into r458;
    add r457 r458 into r459;
    add r459 r1 into r460;
    mul r450 r460 into r461;
    add 18u64 26u64 into r462;
    cast r2.perm2[18u32] into r463 as u64;
    mul r462 r0 into r464;
    add r463 r464 into r465;
    add r465 r1 into r466;
    mul r456 r466 into r467;
    cast r3.perm2[18u32].v into r468 as u64;
    mul r462 r0 into r469;
    add r468 r469 into r470;
    add r470 r1 into r471;
    mul r461 r471 into r472;
    add 19u64 26u64 into r473;
    cast r2.perm2[19u32] into r474 as u64;
    mul r473 r0 into r475;
    add r474 r475 into r476;
    add r476 r1 into r477;
    mul r467 r477 into r478;
    cast r3.perm2[19u32].v into r479 as u64;
    mul r473 r0 into r480;
    add r479 r480 into r481;
    add r481 r1 into r482;
    mul r472 r482 into r483;
    add 20u64 26u64 into r484;
    cast r2.perm2[20u32] into r485 as u64;
    mul r484 r0 into r486;
    add r485 r486 into r487;
    add r487 r1 into r488;
    mul r478 r488 into r489;
    cast r3.perm2[20u32].v into r490 as u64;
    mul r484 r0 into r491;
    add r490 r491 into r492;
    add r492 r1 into r493;
    mul r483 r493 into r494;
    add 21u64 26u64 into r495;
    cast r2.perm2[21u32] into r496 as u64;
    mul r495 r0 into r497;
    add r496 r497 into r498;
    add r498 r1 into r499;
    mul r489 r499 into r500;
    cast r3.perm2[21u32].v into r501 as u64;
    mul r495 r0 into r502;
    add r501 r502 into r503;
    add r503 r1 into r504;
    mul r494 r504 into r505;
    add 22u64 26u64 into r506;
    cast r2.perm2[22u32] into r507 as u64;
    mul r506 r0 into r508;
    add r507 r508 into r509;
    add r509 r1 into r510;
    mul r500 r510 into r511;
    cast r3.perm2[22u32].v into r512 as u64;
    mul r506 r0 into r513;
    add r512 r513 into r514;
    add r514 r1 into r515;
    mul r505 r515 into r516;
    add 23u64 26u64 into r517;
    cast r2.perm2[23u32] into r518 as u64;
    mul r517 r0 into r519;
    add r518 r519 into r520;
    add r520 r1 into r521;
    mul r511 r521 into r522;
    cast r3.perm2[23u32].v into r523 as u64;
    mul r517 r0 into r524;
    add r523 r524 into r525;
    add r525 r1 into r526;
    mul r516 r526 into r527;
    add 24u64 26u64 into r528;
    cast r2.perm2[24u32] into r529 as u64;
    mul r528 r0 into r530;
    add r529 r530 into r531;
    add r531 r1 into r532;
    mul r522 r532 into r533;
    cast r3.perm2[24u32].v into r534 as u64;
    mul r528 r0 into r535;
    add r534 r535 into r536;
    add r536 r1 into r537;
    mul r527 r537 into r538;
    add 25u64 26u64 into r539;
    cast r2.perm2[25u32] into r540 as u64;
    mul r539 r0 into r541;
    add r540 r541 into r542;
    add r542 r1 into r543;
    mul r533 r543 into r544;
    cast r3.perm2[25u32].v into r545 as u64;
    mul r539 r0 into r546;
    add r545 r546 into r547;
    add r547 r1 into r548;
    mul r538 r548 into r549;
    is.eq r544 r549 into r550;
    output r550 as boolean;

function house_dealer_starts_game:
    input r0 as HouseDealerProposedShuffled.record;
    input r1 as PermutatedTable.private;
    input r2 as PlayerProposedShuffle.record;
    input r3 as PermutatedTable.private;
    input r4 as PlayerProposedShuffle.record;
    input r5 as PermutatedTable.private;
    input r6 as PlayerProposedShuffle.record;
    input r7 as PermutatedTable.private;
    input r8 as PlayerProposedShuffle.record;
    input r9 as PermutatedTable.private;
    input r10 as Deck.private;
    input r11 as room_manager.aleo/RoomConfigRequest.record;
    is.eq r0.room_id r2.room_id into r12;
    assert.eq r12 true;
    is.eq r0.room_id r4.room_id into r13;
    assert.eq r13 true;
    is.eq r0.room_id r6.room_id into r14;
    assert.eq r14 true;
    is.eq r0.room_id r8.room_id into r15;
    assert.eq r15 true;
    is.eq r2.seat_index 0u8 into r16;
    assert.eq r16 true;
    is.eq r4.seat_index 1u8 into r17;
    assert.eq r17 true;
    is.eq r6.seat_index 2u8 into r18;
    assert.eq r18 true;
    is.eq r8.seat_index 3u8 into r19;
    assert.eq r19 true;
    hash.bhp256 r2.player_randomness into r20 as field;
    hash.bhp256 r4.player_randomness into r21 as field;
    add r20 r21 into r22;
    hash.bhp256 r6.player_randomness into r23 as field;
    add r22 r23 into r24;
    hash.bhp256 r8.player_randomness into r25 as field;
    add r24 r25 into r26;
    hash.bhp256 r26 into r27 as field;
    cast r27 into r28 as u64;
    add r26 1field into r29;
    hash.bhp256 r29 into r30 as field;
    cast r30 into r31 as u64;
    is.eq r0.perm.perm1[0u32] r1.perm1[0u32].k into r32;
    assert.eq r32 true;
    is.eq r0.perm.perm2[0u32] r1.perm2[0u32].k into r33;
    assert.eq r33 true;
    is.eq r0.perm.perm1[1u32] r1.perm1[1u32].k into r34;
    assert.eq r34 true;
    is.eq r0.perm.perm2[1u32] r1.perm2[1u32].k into r35;
    assert.eq r35 true;
    is.eq r0.perm.perm1[2u32] r1.perm1[2u32].k into r36;
    assert.eq r36 true;
    is.eq r0.perm.perm2[2u32] r1.perm2[2u32].k into r37;
    assert.eq r37 true;
    is.eq r0.perm.perm1[3u32] r1.perm1[3u32].k into r38;
    assert.eq r38 true;
    is.eq r0.perm.perm2[3u32] r1.perm2[3u32].k into r39;
    assert.eq r39 true;
    is.eq r0.perm.perm1[4u32] r1.perm1[4u32].k into r40;
    assert.eq r40 true;
    is.eq r0.perm.perm2[4u32] r1.perm2[4u32].k into r41;
    assert.eq r41 true;
    is.eq r0.perm.perm1[5u32] r1.perm1[5u32].k into r42;
    assert.eq r42 true;
    is.eq r0.perm.perm2[5u32] r1.perm2[5u32].k into r43;
    assert.eq r43 true;
    is.eq r0.perm.perm1[6u32] r1.perm1[6u32].k into r44;
    assert.eq r44 true;
    is.eq r0.perm.perm2[6u32] r1.perm2[6u32].k into r45;
    assert.eq r45 true;
    is.eq r0.perm.perm1[7u32] r1.perm1[7u32].k into r46;
    assert.eq r46 true;
    is.eq r0.perm.perm2[7u32] r1.perm2[7u32].k into r47;
    assert.eq r47 true;
    is.eq r0.perm.perm1[8u32] r1.perm1[8u32].k into r48;
    assert.eq r48 true;
    is.eq r0.perm.perm2[8u32] r1.perm2[8u32].k into r49;
    assert.eq r49 true;
    is.eq r0.perm.perm1[9u32] r1.perm1[9u32].k into r50;
    assert.eq r50 true;
    is.eq r0.perm.perm2[9u32] r1.perm2[9u32].k into r51;
    assert.eq r51 true;
    is.eq r0.perm.perm1[10u32] r1.perm1[10u32].k into r52;
    assert.eq r52 true;
    is.eq r0.perm.perm2[10u32] r1.perm2[10u32].k into r53;
    assert.eq r53 true;
    is.eq r0.perm.perm1[11u32] r1.perm1[11u32].k into r54;
    assert.eq r54 true;
    is.eq r0.perm.perm2[11u32] r1.perm2[11u32].k into r55;
    assert.eq r55 true;
    is.eq r0.perm.perm1[12u32] r1.perm1[12u32].k into r56;
    assert.eq r56 true;
    is.eq r0.perm.perm2[12u32] r1.perm2[12u32].k into r57;
    assert.eq r57 true;
    is.eq r0.perm.perm1[13u32] r1.perm1[13u32].k into r58;
    assert.eq r58 true;
    is.eq r0.perm.perm2[13u32] r1.perm2[13u32].k into r59;
    assert.eq r59 true;
    is.eq r0.perm.perm1[14u32] r1.perm1[14u32].k into r60;
    assert.eq r60 true;
    is.eq r0.perm.perm2[14u32] r1.perm2[14u32].k into r61;
    assert.eq r61 true;
    is.eq r0.perm.perm1[15u32] r1.perm1[15u32].k into r62;
    assert.eq r62 true;
    is.eq r0.perm.perm2[15u32] r1.perm2[15u32].k into r63;
    assert.eq r63 true;
    is.eq r0.perm.perm1[16u32] r1.perm1[16u32].k into r64;
    assert.eq r64 true;
    is.eq r0.perm.perm2[16u32] r1.perm2[16u32].k into r65;
    assert.eq r65 true;
    is.eq r0.perm.perm1[17u32] r1.perm1[17u32].k into r66;
    assert.eq r66 true;
    is.eq r0.perm.perm2[17u32] r1.perm2[17u32].k into r67;
    assert.eq r67 true;
    is.eq r0.perm.perm1[18u32] r1.perm1[18u32].k into r68;
    assert.eq r68 true;
    is.eq r0.perm.perm2[18u32] r1.perm2[18u32].k into r69;
    assert.eq r69 true;
    is.eq r0.perm.perm1[19u32] r1.perm1[19u32].k into r70;
    assert.eq r70 true;
    is.eq r0.perm.perm2[19u32] r1.perm2[19u32].k into r71;
    assert.eq r71 true;
    is.eq r0.perm.perm1[20u32] r1.perm1[20u32].k into r72;
    assert.eq r72 true;
    is.eq r0.perm.perm2[20u32] r1.perm2[20u32].k into r73;
    assert.eq r73 true;
    is.eq r0.perm.perm1[21u32] r1.perm1[21u32].k into r74;
    assert.eq r74 true;
    is.eq r0.perm.perm2[21u32] r1.perm2[21u32].k into r75;
    assert.eq r75 true;
    is.eq r0.perm.perm1[22u32] r1.perm1[22u32].k into r76;
    assert.eq r76 true;
    is.eq r0.perm.perm2[22u32] r1.perm2[22u32].k into r77;
    assert.eq r77 true;
    is.eq r0.perm.perm1[23u32] r1.perm1[23u32].k into r78;
    assert.eq r78 true;
    is.eq r0.perm.perm2[23u32] r1.perm2[23u32].k into r79;
    assert.eq r79 true;
    is.eq r0.perm.perm1[24u32] r1.perm1[24u32].k into r80;
    assert.eq r80 true;
    is.eq r0.perm.perm2[24u32] r1.perm2[24u32].k into r81;
    assert.eq r81 true;
    is.eq r0.perm.perm1[25u32] r1.perm1[25u32].k into r82;
    assert.eq r82 true;
    is.eq r0.perm.perm2[25u32] r1.perm2[25u32].k into r83;
    assert.eq r83 true;
    call grand_product_permutation_check r28 r31 r0.perm r1 into r84;
    assert.eq r84 true;
    cast  r1.perm1[0u32].v r1.perm1[1u32].v r1.perm1[2u32].v r1.perm1[3u32].v r1.perm1[4u32].v r1.perm1[5u32].v r1.perm1[6u32].v r1.perm1[7u32].v r1.perm1[8u32].v r1.perm1[9u32].v r1.perm1[10u32].v r1.perm1[11u32].v r1.perm1[12u32].v r1.perm1[13u32].v r1.perm1[14u32].v r1.perm1[15u32].v r1.perm1[16u32].v r1.perm1[17u32].v r1.perm1[18u32].v r1.perm1[19u32].v r1.perm1[20u32].v r1.perm1[21u32].v r1.perm1[22u32].v r1.perm1[23u32].v r1.perm1[24u32].v r1.perm1[25u32].v into r85 as [u8; 26u32];
    cast  r1.perm2[0u32].v r1.perm2[1u32].v r1.perm2[2u32].v r1.perm2[3u32].v r1.perm2[4u32].v r1.perm2[5u32].v r1.perm2[6u32].v r1.perm2[7u32].v r1.perm2[8u32].v r1.perm2[9u32].v r1.perm2[10u32].v r1.perm2[11u32].v r1.perm2[12u32].v r1.perm2[13u32].v r1.perm2[14u32].v r1.perm2[15u32].v r1.perm2[16u32].v r1.perm2[17u32].v r1.perm2[18u32].v r1.perm2[19u32].v r1.perm2[20u32].v r1.perm2[21u32].v r1.perm2[22u32].v r1.perm2[23u32].v r1.perm2[24u32].v r1.perm2[25u32].v into r86 as [u8; 26u32];
    cast r85 r86 into r87 as Permutation;
    is.eq r87.perm1[0u32] r3.perm1[0u32].k into r88;
    assert.eq r88 true;
    is.eq r87.perm2[0u32] r3.perm2[0u32].k into r89;
    assert.eq r89 true;
    is.eq r87.perm1[1u32] r3.perm1[1u32].k into r90;
    assert.eq r90 true;
    is.eq r87.perm2[1u32] r3.perm2[1u32].k into r91;
    assert.eq r91 true;
    is.eq r87.perm1[2u32] r3.perm1[2u32].k into r92;
    assert.eq r92 true;
    is.eq r87.perm2[2u32] r3.perm2[2u32].k into r93;
    assert.eq r93 true;
    is.eq r87.perm1[3u32] r3.perm1[3u32].k into r94;
    assert.eq r94 true;
    is.eq r87.perm2[3u32] r3.perm2[3u32].k into r95;
    assert.eq r95 true;
    is.eq r87.perm1[4u32] r3.perm1[4u32].k into r96;
    assert.eq r96 true;
    is.eq r87.perm2[4u32] r3.perm2[4u32].k into r97;
    assert.eq r97 true;
    is.eq r87.perm1[5u32] r3.perm1[5u32].k into r98;
    assert.eq r98 true;
    is.eq r87.perm2[5u32] r3.perm2[5u32].k into r99;
    assert.eq r99 true;
    is.eq r87.perm1[6u32] r3.perm1[6u32].k into r100;
    assert.eq r100 true;
    is.eq r87.perm2[6u32] r3.perm2[6u32].k into r101;
    assert.eq r101 true;
    is.eq r87.perm1[7u32] r3.perm1[7u32].k into r102;
    assert.eq r102 true;
    is.eq r87.perm2[7u32] r3.perm2[7u32].k into r103;
    assert.eq r103 true;
    is.eq r87.perm1[8u32] r3.perm1[8u32].k into r104;
    assert.eq r104 true;
    is.eq r87.perm2[8u32] r3.perm2[8u32].k into r105;
    assert.eq r105 true;
    is.eq r87.perm1[9u32] r3.perm1[9u32].k into r106;
    assert.eq r106 true;
    is.eq r87.perm2[9u32] r3.perm2[9u32].k into r107;
    assert.eq r107 true;
    is.eq r87.perm1[10u32] r3.perm1[10u32].k into r108;
    assert.eq r108 true;
    is.eq r87.perm2[10u32] r3.perm2[10u32].k into r109;
    assert.eq r109 true;
    is.eq r87.perm1[11u32] r3.perm1[11u32].k into r110;
    assert.eq r110 true;
    is.eq r87.perm2[11u32] r3.perm2[11u32].k into r111;
    assert.eq r111 true;
    is.eq r87.perm1[12u32] r3.perm1[12u32].k into r112;
    assert.eq r112 true;
    is.eq r87.perm2[12u32] r3.perm2[12u32].k into r113;
    assert.eq r113 true;
    is.eq r87.perm1[13u32] r3.perm1[13u32].k into r114;
    assert.eq r114 true;
    is.eq r87.perm2[13u32] r3.perm2[13u32].k into r115;
    assert.eq r115 true;
    is.eq r87.perm1[14u32] r3.perm1[14u32].k into r116;
    assert.eq r116 true;
    is.eq r87.perm2[14u32] r3.perm2[14u32].k into r117;
    assert.eq r117 true;
    is.eq r87.perm1[15u32] r3.perm1[15u32].k into r118;
    assert.eq r118 true;
    is.eq r87.perm2[15u32] r3.perm2[15u32].k into r119;
    assert.eq r119 true;
    is.eq r87.perm1[16u32] r3.perm1[16u32].k into r120;
    assert.eq r120 true;
    is.eq r87.perm2[16u32] r3.perm2[16u32].k into r121;
    assert.eq r121 true;
    is.eq r87.perm1[17u32] r3.perm1[17u32].k into r122;
    assert.eq r122 true;
    is.eq r87.perm2[17u32] r3.perm2[17u32].k into r123;
    assert.eq r123 true;
    is.eq r87.perm1[18u32] r3.perm1[18u32].k into r124;
    assert.eq r124 true;
    is.eq r87.perm2[18u32] r3.perm2[18u32].k into r125;
    assert.eq r125 true;
    is.eq r87.perm1[19u32] r3.perm1[19u32].k into r126;
    assert.eq r126 true;
    is.eq r87.perm2[19u32] r3.perm2[19u32].k into r127;
    assert.eq r127 true;
    is.eq r87.perm1[20u32] r3.perm1[20u32].k into r128;
    assert.eq r128 true;
    is.eq r87.perm2[20u32] r3.perm2[20u32].k into r129;
    assert.eq r129 true;
    is.eq r87.perm1[21u32] r3.perm1[21u32].k into r130;
    assert.eq r130 true;
    is.eq r87.perm2[21u32] r3.perm2[21u32].k into r131;
    assert.eq r131 true;
    is.eq r87.perm1[22u32] r3.perm1[22u32].k into r132;
    assert.eq r132 true;
    is.eq r87.perm2[22u32] r3.perm2[22u32].k into r133;
    assert.eq r133 true;
    is.eq r87.perm1[23u32] r3.perm1[23u32].k into r134;
    assert.eq r134 true;
    is.eq r87.perm2[23u32] r3.perm2[23u32].k into r135;
    assert.eq r135 true;
    is.eq r87.perm1[24u32] r3.perm1[24u32].k into r136;
    assert.eq r136 true;
    is.eq r87.perm2[24u32] r3.perm2[24u32].k into r137;
    assert.eq r137 true;
    is.eq r87.perm1[25u32] r3.perm1[25u32].k into r138;
    assert.eq r138 true;
    is.eq r87.perm2[25u32] r3.perm2[25u32].k into r139;
    assert.eq r139 true;
    call grand_product_permutation_check r28 r31 r87 r3 into r140;
    assert.eq r140 true;
    cast  r3.perm1[0u32].v r3.perm1[1u32].v r3.perm1[2u32].v r3.perm1[3u32].v r3.perm1[4u32].v r3.perm1[5u32].v r3.perm1[6u32].v r3.perm1[7u32].v r3.perm1[8u32].v r3.perm1[9u32].v r3.perm1[10u32].v r3.perm1[11u32].v r3.perm1[12u32].v r3.perm1[13u32].v r3.perm1[14u32].v r3.perm1[15u32].v r3.perm1[16u32].v r3.perm1[17u32].v r3.perm1[18u32].v r3.perm1[19u32].v r3.perm1[20u32].v r3.perm1[21u32].v r3.perm1[22u32].v r3.perm1[23u32].v r3.perm1[24u32].v r3.perm1[25u32].v into r141 as [u8; 26u32];
    cast  r3.perm2[0u32].v r3.perm2[1u32].v r3.perm2[2u32].v r3.perm2[3u32].v r3.perm2[4u32].v r3.perm2[5u32].v r3.perm2[6u32].v r3.perm2[7u32].v r3.perm2[8u32].v r3.perm2[9u32].v r3.perm2[10u32].v r3.perm2[11u32].v r3.perm2[12u32].v r3.perm2[13u32].v r3.perm2[14u32].v r3.perm2[15u32].v r3.perm2[16u32].v r3.perm2[17u32].v r3.perm2[18u32].v r3.perm2[19u32].v r3.perm2[20u32].v r3.perm2[21u32].v r3.perm2[22u32].v r3.perm2[23u32].v r3.perm2[24u32].v r3.perm2[25u32].v into r142 as [u8; 26u32];
    cast r141 r142 into r143 as Permutation;
    is.eq r143.perm1[0u32] r5.perm1[0u32].k into r144;
    assert.eq r144 true;
    is.eq r143.perm2[0u32] r5.perm2[0u32].k into r145;
    assert.eq r145 true;
    is.eq r143.perm1[1u32] r5.perm1[1u32].k into r146;
    assert.eq r146 true;
    is.eq r143.perm2[1u32] r5.perm2[1u32].k into r147;
    assert.eq r147 true;
    is.eq r143.perm1[2u32] r5.perm1[2u32].k into r148;
    assert.eq r148 true;
    is.eq r143.perm2[2u32] r5.perm2[2u32].k into r149;
    assert.eq r149 true;
    is.eq r143.perm1[3u32] r5.perm1[3u32].k into r150;
    assert.eq r150 true;
    is.eq r143.perm2[3u32] r5.perm2[3u32].k into r151;
    assert.eq r151 true;
    is.eq r143.perm1[4u32] r5.perm1[4u32].k into r152;
    assert.eq r152 true;
    is.eq r143.perm2[4u32] r5.perm2[4u32].k into r153;
    assert.eq r153 true;
    is.eq r143.perm1[5u32] r5.perm1[5u32].k into r154;
    assert.eq r154 true;
    is.eq r143.perm2[5u32] r5.perm2[5u32].k into r155;
    assert.eq r155 true;
    is.eq r143.perm1[6u32] r5.perm1[6u32].k into r156;
    assert.eq r156 true;
    is.eq r143.perm2[6u32] r5.perm2[6u32].k into r157;
    assert.eq r157 true;
    is.eq r143.perm1[7u32] r5.perm1[7u32].k into r158;
    assert.eq r158 true;
    is.eq r143.perm2[7u32] r5.perm2[7u32].k into r159;
    assert.eq r159 true;
    is.eq r143.perm1[8u32] r5.perm1[8u32].k into r160;
    assert.eq r160 true;
    is.eq r143.perm2[8u32] r5.perm2[8u32].k into r161;
    assert.eq r161 true;
    is.eq r143.perm1[9u32] r5.perm1[9u32].k into r162;
    assert.eq r162 true;
    is.eq r143.perm2[9u32] r5.perm2[9u32].k into r163;
    assert.eq r163 true;
    is.eq r143.perm1[10u32] r5.perm1[10u32].k into r164;
    assert.eq r164 true;
    is.eq r143.perm2[10u32] r5.perm2[10u32].k into r165;
    assert.eq r165 true;
    is.eq r143.perm1[11u32] r5.perm1[11u32].k into r166;
    assert.eq r166 true;
    is.eq r143.perm2[11u32] r5.perm2[11u32].k into r167;
    assert.eq r167 true;
    is.eq r143.perm1[12u32] r5.perm1[12u32].k into r168;
    assert.eq r168 true;
    is.eq r143.perm2[12u32] r5.perm2[12u32].k into r169;
    assert.eq r169 true;
    is.eq r143.perm1[13u32] r5.perm1[13u32].k into r170;
    assert.eq r170 true;
    is.eq r143.perm2[13u32] r5.perm2[13u32].k into r171;
    assert.eq r171 true;
    is.eq r143.perm1[14u32] r5.perm1[14u32].k into r172;
    assert.eq r172 true;
    is.eq r143.perm2[14u32] r5.perm2[14u32].k into r173;
    assert.eq r173 true;
    is.eq r143.perm1[15u32] r5.perm1[15u32].k into r174;
    assert.eq r174 true;
    is.eq r143.perm2[15u32] r5.perm2[15u32].k into r175;
    assert.eq r175 true;
    is.eq r143.perm1[16u32] r5.perm1[16u32].k into r176;
    assert.eq r176 true;
    is.eq r143.perm2[16u32] r5.perm2[16u32].k into r177;
    assert.eq r177 true;
    is.eq r143.perm1[17u32] r5.perm1[17u32].k into r178;
    assert.eq r178 true;
    is.eq r143.perm2[17u32] r5.perm2[17u32].k into r179;
    assert.eq r179 true;
    is.eq r143.perm1[18u32] r5.perm1[18u32].k into r180;
    assert.eq r180 true;
    is.eq r143.perm2[18u32] r5.perm2[18u32].k into r181;
    assert.eq r181 true;
    is.eq r143.perm1[19u32] r5.perm1[19u32].k into r182;
    assert.eq r182 true;
    is.eq r143.perm2[19u32] r5.perm2[19u32].k into r183;
    assert.eq r183 true;
    is.eq r143.perm1[20u32] r5.perm1[20u32].k into r184;
    assert.eq r184 true;
    is.eq r143.perm2[20u32] r5.perm2[20u32].k into r185;
    assert.eq r185 true;
    is.eq r143.perm1[21u32] r5.perm1[21u32].k into r186;
    assert.eq r186 true;
    is.eq r143.perm2[21u32] r5.perm2[21u32].k into r187;
    assert.eq r187 true;
    is.eq r143.perm1[22u32] r5.perm1[22u32].k into r188;
    assert.eq r188 true;
    is.eq r143.perm2[22u32] r5.perm2[22u32].k into r189;
    assert.eq r189 true;
    is.eq r143.perm1[23u32] r5.perm1[23u32].k into r190;
    assert.eq r190 true;
    is.eq r143.perm2[23u32] r5.perm2[23u32].k into r191;
    assert.eq r191 true;
    is.eq r143.perm1[24u32] r5.perm1[24u32].k into r192;
    assert.eq r192 true;
    is.eq r143.perm2[24u32] r5.perm2[24u32].k into r193;
    assert.eq r193 true;
    is.eq r143.perm1[25u32] r5.perm1[25u32].k into r194;
    assert.eq r194 true;
    is.eq r143.perm2[25u32] r5.perm2[25u32].k into r195;
    assert.eq r195 true;
    call grand_product_permutation_check r28 r31 r143 r5 into r196;
    assert.eq r196 true;
    cast  r5.perm1[0u32].v r5.perm1[1u32].v r5.perm1[2u32].v r5.perm1[3u32].v r5.perm1[4u32].v r5.perm1[5u32].v r5.perm1[6u32].v r5.perm1[7u32].v r5.perm1[8u32].v r5.perm1[9u32].v r5.perm1[10u32].v r5.perm1[11u32].v r5.perm1[12u32].v r5.perm1[13u32].v r5.perm1[14u32].v r5.perm1[15u32].v r5.perm1[16u32].v r5.perm1[17u32].v r5.perm1[18u32].v r5.perm1[19u32].v r5.perm1[20u32].v r5.perm1[21u32].v r5.perm1[22u32].v r5.perm1[23u32].v r5.perm1[24u32].v r5.perm1[25u32].v into r197 as [u8; 26u32];
    cast  r5.perm2[0u32].v r5.perm2[1u32].v r5.perm2[2u32].v r5.perm2[3u32].v r5.perm2[4u32].v r5.perm2[5u32].v r5.perm2[6u32].v r5.perm2[7u32].v r5.perm2[8u32].v r5.perm2[9u32].v r5.perm2[10u32].v r5.perm2[11u32].v r5.perm2[12u32].v r5.perm2[13u32].v r5.perm2[14u32].v r5.perm2[15u32].v r5.perm2[16u32].v r5.perm2[17u32].v r5.perm2[18u32].v r5.perm2[19u32].v r5.perm2[20u32].v r5.perm2[21u32].v r5.perm2[22u32].v r5.perm2[23u32].v r5.perm2[24u32].v r5.perm2[25u32].v into r198 as [u8; 26u32];
    cast r197 r198 into r199 as Permutation;
    is.eq r199.perm1[0u32] r7.perm1[0u32].k into r200;
    assert.eq r200 true;
    is.eq r199.perm2[0u32] r7.perm2[0u32].k into r201;
    assert.eq r201 true;
    is.eq r199.perm1[1u32] r7.perm1[1u32].k into r202;
    assert.eq r202 true;
    is.eq r199.perm2[1u32] r7.perm2[1u32].k into r203;
    assert.eq r203 true;
    is.eq r199.perm1[2u32] r7.perm1[2u32].k into r204;
    assert.eq r204 true;
    is.eq r199.perm2[2u32] r7.perm2[2u32].k into r205;
    assert.eq r205 true;
    is.eq r199.perm1[3u32] r7.perm1[3u32].k into r206;
    assert.eq r206 true;
    is.eq r199.perm2[3u32] r7.perm2[3u32].k into r207;
    assert.eq r207 true;
    is.eq r199.perm1[4u32] r7.perm1[4u32].k into r208;
    assert.eq r208 true;
    is.eq r199.perm2[4u32] r7.perm2[4u32].k into r209;
    assert.eq r209 true;
    is.eq r199.perm1[5u32] r7.perm1[5u32].k into r210;
    assert.eq r210 true;
    is.eq r199.perm2[5u32] r7.perm2[5u32].k into r211;
    assert.eq r211 true;
    is.eq r199.perm1[6u32] r7.perm1[6u32].k into r212;
    assert.eq r212 true;
    is.eq r199.perm2[6u32] r7.perm2[6u32].k into r213;
    assert.eq r213 true;
    is.eq r199.perm1[7u32] r7.perm1[7u32].k into r214;
    assert.eq r214 true;
    is.eq r199.perm2[7u32] r7.perm2[7u32].k into r215;
    assert.eq r215 true;
    is.eq r199.perm1[8u32] r7.perm1[8u32].k into r216;
    assert.eq r216 true;
    is.eq r199.perm2[8u32] r7.perm2[8u32].k into r217;
    assert.eq r217 true;
    is.eq r199.perm1[9u32] r7.perm1[9u32].k into r218;
    assert.eq r218 true;
    is.eq r199.perm2[9u32] r7.perm2[9u32].k into r219;
    assert.eq r219 true;
    is.eq r199.perm1[10u32] r7.perm1[10u32].k into r220;
    assert.eq r220 true;
    is.eq r199.perm2[10u32] r7.perm2[10u32].k into r221;
    assert.eq r221 true;
    is.eq r199.perm1[11u32] r7.perm1[11u32].k into r222;
    assert.eq r222 true;
    is.eq r199.perm2[11u32] r7.perm2[11u32].k into r223;
    assert.eq r223 true;
    is.eq r199.perm1[12u32] r7.perm1[12u32].k into r224;
    assert.eq r224 true;
    is.eq r199.perm2[12u32] r7.perm2[12u32].k into r225;
    assert.eq r225 true;
    is.eq r199.perm1[13u32] r7.perm1[13u32].k into r226;
    assert.eq r226 true;
    is.eq r199.perm2[13u32] r7.perm2[13u32].k into r227;
    assert.eq r227 true;
    is.eq r199.perm1[14u32] r7.perm1[14u32].k into r228;
    assert.eq r228 true;
    is.eq r199.perm2[14u32] r7.perm2[14u32].k into r229;
    assert.eq r229 true;
    is.eq r199.perm1[15u32] r7.perm1[15u32].k into r230;
    assert.eq r230 true;
    is.eq r199.perm2[15u32] r7.perm2[15u32].k into r231;
    assert.eq r231 true;
    is.eq r199.perm1[16u32] r7.perm1[16u32].k into r232;
    assert.eq r232 true;
    is.eq r199.perm2[16u32] r7.perm2[16u32].k into r233;
    assert.eq r233 true;
    is.eq r199.perm1[17u32] r7.perm1[17u32].k into r234;
    assert.eq r234 true;
    is.eq r199.perm2[17u32] r7.perm2[17u32].k into r235;
    assert.eq r235 true;
    is.eq r199.perm1[18u32] r7.perm1[18u32].k into r236;
    assert.eq r236 true;
    is.eq r199.perm2[18u32] r7.perm2[18u32].k into r237;
    assert.eq r237 true;
    is.eq r199.perm1[19u32] r7.perm1[19u32].k into r238;
    assert.eq r238 true;
    is.eq r199.perm2[19u32] r7.perm2[19u32].k into r239;
    assert.eq r239 true;
    is.eq r199.perm1[20u32] r7.perm1[20u32].k into r240;
    assert.eq r240 true;
    is.eq r199.perm2[20u32] r7.perm2[20u32].k into r241;
    assert.eq r241 true;
    is.eq r199.perm1[21u32] r7.perm1[21u32].k into r242;
    assert.eq r242 true;
    is.eq r199.perm2[21u32] r7.perm2[21u32].k into r243;
    assert.eq r243 true;
    is.eq r199.perm1[22u32] r7.perm1[22u32].k into r244;
    assert.eq r244 true;
    is.eq r199.perm2[22u32] r7.perm2[22u32].k into r245;
    assert.eq r245 true;
    is.eq r199.perm1[23u32] r7.perm1[23u32].k into r246;
    assert.eq r246 true;
    is.eq r199.perm2[23u32] r7.perm2[23u32].k into r247;
    assert.eq r247 true;
    is.eq r199.perm1[24u32] r7.perm1[24u32].k into r248;
    assert.eq r248 true;
    is.eq r199.perm2[24u32] r7.perm2[24u32].k into r249;
    assert.eq r249 true;
    is.eq r199.perm1[25u32] r7.perm1[25u32].k into r250;
    assert.eq r250 true;
    is.eq r199.perm2[25u32] r7.perm2[25u32].k into r251;
    assert.eq r251 true;
    call grand_product_permutation_check r28 r31 r199 r7 into r252;
    assert.eq r252 true;
    cast  r7.perm1[0u32].v r7.perm1[1u32].v r7.perm1[2u32].v r7.perm1[3u32].v r7.perm1[4u32].v r7.perm1[5u32].v r7.perm1[6u32].v r7.perm1[7u32].v r7.perm1[8u32].v r7.perm1[9u32].v r7.perm1[10u32].v r7.perm1[11u32].v r7.perm1[12u32].v r7.perm1[13u32].v r7.perm1[14u32].v r7.perm1[15u32].v r7.perm1[16u32].v r7.perm1[17u32].v r7.perm1[18u32].v r7.perm1[19u32].v r7.perm1[20u32].v r7.perm1[21u32].v r7.perm1[22u32].v r7.perm1[23u32].v r7.perm1[24u32].v r7.perm1[25u32].v into r253 as [u8; 26u32];
    cast  r7.perm2[0u32].v r7.perm2[1u32].v r7.perm2[2u32].v r7.perm2[3u32].v r7.perm2[4u32].v r7.perm2[5u32].v r7.perm2[6u32].v r7.perm2[7u32].v r7.perm2[8u32].v r7.perm2[9u32].v r7.perm2[10u32].v r7.perm2[11u32].v r7.perm2[12u32].v r7.perm2[13u32].v r7.perm2[14u32].v r7.perm2[15u32].v r7.perm2[16u32].v r7.perm2[17u32].v r7.perm2[18u32].v r7.perm2[19u32].v r7.perm2[20u32].v r7.perm2[21u32].v r7.perm2[22u32].v r7.perm2[23u32].v r7.perm2[24u32].v r7.perm2[25u32].v into r254 as [u8; 26u32];
    cast r253 r254 into r255 as Permutation;
    is.eq r255.perm1[0u32] r9.perm1[0u32].k into r256;
    assert.eq r256 true;
    is.eq r255.perm2[0u32] r9.perm2[0u32].k into r257;
    assert.eq r257 true;
    is.eq r255.perm1[1u32] r9.perm1[1u32].k into r258;
    assert.eq r258 true;
    is.eq r255.perm2[1u32] r9.perm2[1u32].k into r259;
    assert.eq r259 true;
    is.eq r255.perm1[2u32] r9.perm1[2u32].k into r260;
    assert.eq r260 true;
    is.eq r255.perm2[2u32] r9.perm2[2u32].k into r261;
    assert.eq r261 true;
    is.eq r255.perm1[3u32] r9.perm1[3u32].k into r262;
    assert.eq r262 true;
    is.eq r255.perm2[3u32] r9.perm2[3u32].k into r263;
    assert.eq r263 true;
    is.eq r255.perm1[4u32] r9.perm1[4u32].k into r264;
    assert.eq r264 true;
    is.eq r255.perm2[4u32] r9.perm2[4u32].k into r265;
    assert.eq r265 true;
    is.eq r255.perm1[5u32] r9.perm1[5u32].k into r266;
    assert.eq r266 true;
    is.eq r255.perm2[5u32] r9.perm2[5u32].k into r267;
    assert.eq r267 true;
    is.eq r255.perm1[6u32] r9.perm1[6u32].k into r268;
    assert.eq r268 true;
    is.eq r255.perm2[6u32] r9.perm2[6u32].k into r269;
    assert.eq r269 true;
    is.eq r255.perm1[7u32] r9.perm1[7u32].k into r270;
    assert.eq r270 true;
    is.eq r255.perm2[7u32] r9.perm2[7u32].k into r271;
    assert.eq r271 true;
    is.eq r255.perm1[8u32] r9.perm1[8u32].k into r272;
    assert.eq r272 true;
    is.eq r255.perm2[8u32] r9.perm2[8u32].k into r273;
    assert.eq r273 true;
    is.eq r255.perm1[9u32] r9.perm1[9u32].k into r274;
    assert.eq r274 true;
    is.eq r255.perm2[9u32] r9.perm2[9u32].k into r275;
    assert.eq r275 true;
    is.eq r255.perm1[10u32] r9.perm1[10u32].k into r276;
    assert.eq r276 true;
    is.eq r255.perm2[10u32] r9.perm2[10u32].k into r277;
    assert.eq r277 true;
    is.eq r255.perm1[11u32] r9.perm1[11u32].k into r278;
    assert.eq r278 true;
    is.eq r255.perm2[11u32] r9.perm2[11u32].k into r279;
    assert.eq r279 true;
    is.eq r255.perm1[12u32] r9.perm1[12u32].k into r280;
    assert.eq r280 true;
    is.eq r255.perm2[12u32] r9.perm2[12u32].k into r281;
    assert.eq r281 true;
    is.eq r255.perm1[13u32] r9.perm1[13u32].k into r282;
    assert.eq r282 true;
    is.eq r255.perm2[13u32] r9.perm2[13u32].k into r283;
    assert.eq r283 true;
    is.eq r255.perm1[14u32] r9.perm1[14u32].k into r284;
    assert.eq r284 true;
    is.eq r255.perm2[14u32] r9.perm2[14u32].k into r285;
    assert.eq r285 true;
    is.eq r255.perm1[15u32] r9.perm1[15u32].k into r286;
    assert.eq r286 true;
    is.eq r255.perm2[15u32] r9.perm2[15u32].k into r287;
    assert.eq r287 true;
    is.eq r255.perm1[16u32] r9.perm1[16u32].k into r288;
    assert.eq r288 true;
    is.eq r255.perm2[16u32] r9.perm2[16u32].k into r289;
    assert.eq r289 true;
    is.eq r255.perm1[17u32] r9.perm1[17u32].k into r290;
    assert.eq r290 true;
    is.eq r255.perm2[17u32] r9.perm2[17u32].k into r291;
    assert.eq r291 true;
    is.eq r255.perm1[18u32] r9.perm1[18u32].k into r292;
    assert.eq r292 true;
    is.eq r255.perm2[18u32] r9.perm2[18u32].k into r293;
    assert.eq r293 true;
    is.eq r255.perm1[19u32] r9.perm1[19u32].k into r294;
    assert.eq r294 true;
    is.eq r255.perm2[19u32] r9.perm2[19u32].k into r295;
    assert.eq r295 true;
    is.eq r255.perm1[20u32] r9.perm1[20u32].k into r296;
    assert.eq r296 true;
    is.eq r255.perm2[20u32] r9.perm2[20u32].k into r297;
    assert.eq r297 true;
    is.eq r255.perm1[21u32] r9.perm1[21u32].k into r298;
    assert.eq r298 true;
    is.eq r255.perm2[21u32] r9.perm2[21u32].k into r299;
    assert.eq r299 true;
    is.eq r255.perm1[22u32] r9.perm1[22u32].k into r300;
    assert.eq r300 true;
    is.eq r255.perm2[22u32] r9.perm2[22u32].k into r301;
    assert.eq r301 true;
    is.eq r255.perm1[23u32] r9.perm1[23u32].k into r302;
    assert.eq r302 true;
    is.eq r255.perm2[23u32] r9.perm2[23u32].k into r303;
    assert.eq r303 true;
    is.eq r255.perm1[24u32] r9.perm1[24u32].k into r304;
    assert.eq r304 true;
    is.eq r255.perm2[24u32] r9.perm2[24u32].k into r305;
    assert.eq r305 true;
    is.eq r255.perm1[25u32] r9.perm1[25u32].k into r306;
    assert.eq r306 true;
    is.eq r255.perm2[25u32] r9.perm2[25u32].k into r307;
    assert.eq r307 true;
    call grand_product_permutation_check r28 r31 r255 r9 into r308;
    assert.eq r308 true;
    cast  r9.perm1[0u32].v r9.perm1[1u32].v r9.perm1[2u32].v r9.perm1[3u32].v r9.perm1[4u32].v r9.perm1[5u32].v r9.perm1[6u32].v r9.perm1[7u32].v r9.perm1[8u32].v r9.perm1[9u32].v r9.perm1[10u32].v r9.perm1[11u32].v r9.perm1[12u32].v r9.perm1[13u32].v r9.perm1[14u32].v r9.perm1[15u32].v r9.perm1[16u32].v r9.perm1[17u32].v r9.perm1[18u32].v r9.perm1[19u32].v r9.perm1[20u32].v r9.perm1[21u32].v r9.perm1[22u32].v r9.perm1[23u32].v r9.perm1[24u32].v r9.perm1[25u32].v into r309 as [u8; 26u32];
    cast  r9.perm2[0u32].v r9.perm2[1u32].v r9.perm2[2u32].v r9.perm2[3u32].v r9.perm2[4u32].v r9.perm2[5u32].v r9.perm2[6u32].v r9.perm2[7u32].v r9.perm2[8u32].v r9.perm2[9u32].v r9.perm2[10u32].v r9.perm2[11u32].v r9.perm2[12u32].v r9.perm2[13u32].v r9.perm2[14u32].v r9.perm2[15u32].v r9.perm2[16u32].v r9.perm2[17u32].v r9.perm2[18u32].v r9.perm2[19u32].v r9.perm2[20u32].v r9.perm2[21u32].v r9.perm2[22u32].v r9.perm2[23u32].v r9.perm2[24u32].v r9.perm2[25u32].v into r310 as [u8; 26u32];
    cast r309 r310 into r311 as Permutation;
    is.eq r10.cards1[0u32].index r311.perm1[0u32] into r312;
    assert.eq r312 true;
    is.eq r10.cards2[0u32].index r311.perm2[0u32] into r313;
    assert.eq r313 true;
    is.eq r10.cards1[1u32].index r311.perm1[1u32] into r314;
    assert.eq r314 true;
    is.eq r10.cards2[1u32].index r311.perm2[1u32] into r315;
    assert.eq r315 true;
    is.eq r10.cards1[2u32].index r311.perm1[2u32] into r316;
    assert.eq r316 true;
    is.eq r10.cards2[2u32].index r311.perm2[2u32] into r317;
    assert.eq r317 true;
    is.eq r10.cards1[3u32].index r311.perm1[3u32] into r318;
    assert.eq r318 true;
    is.eq r10.cards2[3u32].index r311.perm2[3u32] into r319;
    assert.eq r319 true;
    is.eq r10.cards1[4u32].index r311.perm1[4u32] into r320;
    assert.eq r320 true;
    is.eq r10.cards2[4u32].index r311.perm2[4u32] into r321;
    assert.eq r321 true;
    is.eq r10.cards1[5u32].index r311.perm1[5u32] into r322;
    assert.eq r322 true;
    is.eq r10.cards2[5u32].index r311.perm2[5u32] into r323;
    assert.eq r323 true;
    is.eq r10.cards1[6u32].index r311.perm1[6u32] into r324;
    assert.eq r324 true;
    is.eq r10.cards2[6u32].index r311.perm2[6u32] into r325;
    assert.eq r325 true;
    is.eq r10.cards1[7u32].index r311.perm1[7u32] into r326;
    assert.eq r326 true;
    is.eq r10.cards2[7u32].index r311.perm2[7u32] into r327;
    assert.eq r327 true;
    is.eq r10.cards1[8u32].index r311.perm1[8u32] into r328;
    assert.eq r328 true;
    is.eq r10.cards2[8u32].index r311.perm2[8u32] into r329;
    assert.eq r329 true;
    is.eq r10.cards1[9u32].index r311.perm1[9u32] into r330;
    assert.eq r330 true;
    is.eq r10.cards2[9u32].index r311.perm2[9u32] into r331;
    assert.eq r331 true;
    is.eq r10.cards1[10u32].index r311.perm1[10u32] into r332;
    assert.eq r332 true;
    is.eq r10.cards2[10u32].index r311.perm2[10u32] into r333;
    assert.eq r333 true;
    is.eq r10.cards1[11u32].index r311.perm1[11u32] into r334;
    assert.eq r334 true;
    is.eq r10.cards2[11u32].index r311.perm2[11u32] into r335;
    assert.eq r335 true;
    is.eq r10.cards1[12u32].index r311.perm1[12u32] into r336;
    assert.eq r336 true;
    is.eq r10.cards2[12u32].index r311.perm2[12u32] into r337;
    assert.eq r337 true;
    is.eq r10.cards1[13u32].index r311.perm1[13u32] into r338;
    assert.eq r338 true;
    is.eq r10.cards2[13u32].index r311.perm2[13u32] into r339;
    assert.eq r339 true;
    is.eq r10.cards1[14u32].index r311.perm1[14u32] into r340;
    assert.eq r340 true;
    is.eq r10.cards2[14u32].index r311.perm2[14u32] into r341;
    assert.eq r341 true;
    is.eq r10.cards1[15u32].index r311.perm1[15u32] into r342;
    assert.eq r342 true;
    is.eq r10.cards2[15u32].index r311.perm2[15u32] into r343;
    assert.eq r343 true;
    is.eq r10.cards1[16u32].index r311.perm1[16u32] into r344;
    assert.eq r344 true;
    is.eq r10.cards2[16u32].index r311.perm2[16u32] into r345;
    assert.eq r345 true;
    is.eq r10.cards1[17u32].index r311.perm1[17u32] into r346;
    assert.eq r346 true;
    is.eq r10.cards2[17u32].index r311.perm2[17u32] into r347;
    assert.eq r347 true;
    is.eq r10.cards1[18u32].index r311.perm1[18u32] into r348;
    assert.eq r348 true;
    is.eq r10.cards2[18u32].index r311.perm2[18u32] into r349;
    assert.eq r349 true;
    is.eq r10.cards1[19u32].index r311.perm1[19u32] into r350;
    assert.eq r350 true;
    is.eq r10.cards2[19u32].index r311.perm2[19u32] into r351;
    assert.eq r351 true;
    is.eq r10.cards1[20u32].index r311.perm1[20u32] into r352;
    assert.eq r352 true;
    is.eq r10.cards2[20u32].index r311.perm2[20u32] into r353;
    assert.eq r353 true;
    is.eq r10.cards1[21u32].index r311.perm1[21u32] into r354;
    assert.eq r354 true;
    is.eq r10.cards2[21u32].index r311.perm2[21u32] into r355;
    assert.eq r355 true;
    is.eq r10.cards1[22u32].index r311.perm1[22u32] into r356;
    assert.eq r356 true;
    is.eq r10.cards2[22u32].index r311.perm2[22u32] into r357;
    assert.eq r357 true;
    is.eq r10.cards1[23u32].index r311.perm1[23u32] into r358;
    assert.eq r358 true;
    is.eq r10.cards2[23u32].index r311.perm2[23u32] into r359;
    assert.eq r359 true;
    is.eq r10.cards1[24u32].index r311.perm1[24u32] into r360;
    assert.eq r360 true;
    is.eq r10.cards2[24u32].index r311.perm2[24u32] into r361;
    assert.eq r361 true;
    is.eq r10.cards1[25u32].index r311.perm1[25u32] into r362;
    assert.eq r362 true;
    is.eq r10.cards2[25u32].index r311.perm2[25u32] into r363;
    assert.eq r363 true;
    cast  r2.seat_owner r4.seat_owner r6.seat_owner r8.seat_owner into r364 as [address; 4u32];
    cast r0.room_id r10 0u8 r364 into r365 as HouseDealerState;
    cast r11.room_config.joined_users[0u32].player_address r11.room_config.joined_users[0u32].bet 0u64 false false into r366 as Player;
    cast r11.room_config.joined_users[1u32].player_address r11.room_config.joined_users[1u32].bet 0u64 false false into r367 as Player;
    cast r11.room_config.joined_users[2u32].player_address r11.room_config.joined_users[2u32].bet 0u64 false false into r368 as Player;
    cast r11.room_config.joined_users[3u32].player_address r11.room_config.joined_users[3u32].bet 0u64 false false into r369 as Player;
    cast  r366 r367 r368 r369 into r370 as [Player; 4u32];
    cast 13u8 13u8 52u8 into r371 as Card;
    cast  r371 r371 r371 r371 r371 into r372 as [Card; 5u32];
    add r11.room_config.big_blind_seat 1u8 into r373;
    rem r373 r11.room_config.num_joined_users into r374;
    cast r11.room_config.game_state_manager_address r11.room_config.num_joined_users self.caller r11.room_config.dealer_seat r11.room_config.small_blind_seat r11.room_config.big_blind_seat r11.room_config.small_blind r11.room_config.big_blind r11.room_config.room_id 0u8 r372 r370 0u64 0u64 0u64 r374 0u8 into r375 as GameState.record;
    cast r365.room_id r365.deck 8u8 r365.player_addresses into r376 as HouseDealerState;
    cast  r365.deck.cards1[0u32] r365.deck.cards1[1u32] into r377 as [Card; 2u32];
    cast r365.player_addresses[0u32] r377 into r378 as PlayerHand.record;
    cast  r365.deck.cards1[2u32] r365.deck.cards1[3u32] into r379 as [Card; 2u32];
    cast r365.player_addresses[1u32] r379 into r380 as PlayerHand.record;
    cast  r365.deck.cards1[4u32] r365.deck.cards1[5u32] into r381 as [Card; 2u32];
    cast r365.player_addresses[2u32] r381 into r382 as PlayerHand.record;
    cast  r365.deck.cards1[6u32] r365.deck.cards1[7u32] into r383 as [Card; 2u32];
    cast r365.player_addresses[3u32] r383 into r384 as PlayerHand.record;
    is.eq r375.active_player_turn_index 0u8 into r385;
    not r385 into r386;
    is.eq r375.active_player_turn_index 1u8 into r387;
    and r386 r387 into r388;
    not r387 into r389;
    is.eq r375.active_player_turn_index 2u8 into r390;
    and r386 r389 into r391;
    and r391 r390 into r392;
    not r390 into r393;
    and r391 r393 into r394;
    ternary r392 r375.players[2u32].player_address r375.players[3u32].player_address into r395;
    ternary r392 r375.players[2u32].stack r375.players[3u32].stack into r396;
    ternary r392 r375.players[2u32].contributed r375.players[3u32].contributed into r397;
    ternary r392 r375.players[2u32].folded r375.players[3u32].folded into r398;
    ternary r392 r375.players[2u32].all_in r375.players[3u32].all_in into r399;
    cast r395 r396 r397 r398 r399 into r400 as Player;
    ternary r388 r375.players[1u32].player_address r400.player_address into r401;
    ternary r388 r375.players[1u32].stack r400.stack into r402;
    ternary r388 r375.players[1u32].contributed r400.contributed into r403;
    ternary r388 r375.players[1u32].folded r400.folded into r404;
    ternary r388 r375.players[1u32].all_in r400.all_in into r405;
    cast r401 r402 r403 r404 r405 into r406 as Player;
    ternary r385 r375.players[0u32].player_address r406.player_address into r407;
    ternary r385 r375.players[0u32].stack r406.stack into r408;
    ternary r385 r375.players[0u32].contributed r406.contributed into r409;
    ternary r385 r375.players[0u32].folded r406.folded into r410;
    ternary r385 r375.players[0u32].all_in r406.all_in into r411;
    cast r407 r408 r409 r410 r411 into r412 as Player;
    cast r412.player_address r375.active_player_turn_index r375.room_id r375.nonce r412.stack r412.contributed r375.highest_bet r375.main_pot into r413 as PlayerActionRequest.record;
    cast self.caller r376 into r414 as HouseDealerStateRecord.record;
    output r375 as GameState.record;
    output r414 as HouseDealerStateRecord.record;
    output r378 as PlayerHand.record;
    output r380 as PlayerHand.record;
    output r382 as PlayerHand.record;
    output r384 as PlayerHand.record;
    output r413 as PlayerActionRequest.record;

function house_dealer_deal_flop:
    input r0 as HouseDealerState.private;
    input r1 as address.private;
    is.eq r0.next_card_index 8u8 into r2;
    assert.eq r2 true;
    cast r0.room_id r0.deck 12u8 r0.player_addresses into r3 as HouseDealerState;
    cast  r0.deck.cards1[9u32] r0.deck.cards1[10u32] r0.deck.cards1[11u32] into r4 as [Card; 3u32];
    cast r1 r4 r0.room_id true into r5 as DealtThreeCommunityCards.record;
    output r3 as HouseDealerState.private;
    output r5 as DealtThreeCommunityCards.record;

function house_dealer_deal_turn:
    input r0 as HouseDealerState.private;
    input r1 as address.private;
    is.eq r0.next_card_index 12u8 into r2;
    assert.eq r2 true;
    cast r0.room_id r0.deck 14u8 r0.player_addresses into r3 as HouseDealerState;
    cast r1 r0.deck.cards1[13u32] true r0.room_id into r4 as DealtOneCommunityCard.record;
    output r3 as HouseDealerState.private;
    output r4 as DealtOneCommunityCard.record;

function house_dealer_deal_river:
    input r0 as HouseDealerState.private;
    input r1 as address.private;
    is.eq r0.next_card_index 14u8 into r2;
    assert.eq r2 true;
    cast r0.room_id r0.deck 16u8 r0.player_addresses into r3 as HouseDealerState;
    cast r1 r0.deck.cards1[15u32] false r0.room_id into r4 as DealtOneCommunityCard.record;
    output r3 as HouseDealerState.private;
    output r4 as DealtOneCommunityCard.record;

function main:
    input r0 as u32.public;
    input r1 as u32.private;
    add r0 r1 into r2;
    output r2 as u32.private;

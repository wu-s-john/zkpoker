import room_manager.aleo;
program dealer.aleo;

struct Card:
    rank as u8;
    suit as u8;
    index as u8;

record DealtOneCommunityCard:
    owner as address.private;
    card as Card.private;
    is_turn as boolean.private;
    room_id as u32.private;

record DealtThreeCommunityCards:
    owner as address.private;
    cards as [Card; 3u32].private;
    room_id as u32.private;
    is_next_phase_turn as boolean.private;

struct Deck:
    cards1 as [Card; 26u32];
    cards2 as [Card; 26u32];

struct HouseDealerState:
    room_id as u32;
    deck as Deck;
    next_card_index as u8;
    player_addresses as [address; 4u32];

record HouseDealerStateRecord:
    owner as address.private;
    state as HouseDealerState.private;

record PlayerHand:
    owner as address.private;
    hole_cards as [Card; 2u32].private;

struct Permutation:
    perm1 as [u8; 26u32];
    perm2 as [u8; 26u32];

record PlayerProposedShuffle:
    owner as address.private;
    room_id as u32.private;
    seat_index as u8.private;
    seat_owner as address.private;
    dealer_nonce as u64.private;
    perm as Permutation.private;
    player_randomness as scalar.private;

record HouseDealerProposedShuffled:
    owner as address.private;
    perm as Permutation.private;
    room_id as u32.private;
    nonce as u64.private;

record HouseDealerShuffleRequest:
    owner as address.private;
    room_id as u32.private;
    seat_index as u8.private;

struct PlayerRoomConfig:
    player_address as address;
    bet as u64;

struct RoomConfig:
    big_blind as u64;
    big_blind_seat as u8;
    small_blind as u64;
    small_blind_seat as u8;
    dealer_seat as u8;
    min_stack as u64;
    seats as u8;
    room_id as u32;
    joined_users as [PlayerRoomConfig; 4u32];
    num_joined_users as u8;
    game_state_manager_address as address;

struct KeyValue:
    k as u8;
    v as u8;

struct PermutatedTable:
    perm1 as [KeyValue; 26u32];
    perm2 as [KeyValue; 26u32];

function house_dealer_provide_shuffle:
    input r0 as room_manager.aleo/HouseDealerCreateDeckRequest.record;
    input r1 as Permutation.private;
    input r2 as u32.private;
    cast self.caller r1 r2 0u64 into r3 as HouseDealerProposedShuffled.record;
    cast r0.player_addresses[0u32] r2 0u8 into r4 as HouseDealerShuffleRequest.record;
    cast r0.player_addresses[1u32] r2 1u8 into r5 as HouseDealerShuffleRequest.record;
    cast r0.player_addresses[2u32] r2 2u8 into r6 as HouseDealerShuffleRequest.record;
    cast r0.player_addresses[3u32] r2 3u8 into r7 as HouseDealerShuffleRequest.record;
    output r3 as HouseDealerProposedShuffled.record;
    output r4 as HouseDealerShuffleRequest.record;
    output r5 as HouseDealerShuffleRequest.record;
    output r6 as HouseDealerShuffleRequest.record;
    output r7 as HouseDealerShuffleRequest.record;

function house_dealer_starts_game:
    input r0 as HouseDealerProposedShuffled.record;
    input r1 as PermutatedTable.private;
    input r2 as PlayerProposedShuffle.record;
    input r3 as PermutatedTable.private;
    input r4 as PlayerProposedShuffle.record;
    input r5 as PermutatedTable.private;
    input r6 as PlayerProposedShuffle.record;
    input r7 as PermutatedTable.private;
    input r8 as PlayerProposedShuffle.record;
    input r9 as PermutatedTable.private;
    input r10 as Deck.private;
    input r11 as room_manager.aleo/RoomConfigRequest.record;
    is.eq r0.room_id r2.room_id into r12;
    assert.eq r12 true;
    is.eq r0.room_id r4.room_id into r13;
    assert.eq r13 true;
    is.eq r0.room_id r6.room_id into r14;
    assert.eq r14 true;
    is.eq r0.room_id r8.room_id into r15;
    assert.eq r15 true;
    is.eq r2.seat_index 0u8 into r16;
    assert.eq r16 true;
    is.eq r4.seat_index 1u8 into r17;
    assert.eq r17 true;
    is.eq r6.seat_index 2u8 into r18;
    assert.eq r18 true;
    is.eq r8.seat_index 3u8 into r19;
    assert.eq r19 true;
    hash.bhp256 r2.player_randomness into r20 as field;
    hash.bhp256 r4.player_randomness into r21 as field;
    add r20 r21 into r22;
    hash.bhp256 r6.player_randomness into r23 as field;
    add r22 r23 into r24;
    hash.bhp256 r8.player_randomness into r25 as field;
    add r24 r25 into r26;
    hash.bhp256 r26 into r27 as field;
    cast r27 into r28 as u64;
    add r26 1field into r29;
    hash.bhp256 r29 into r30 as field;
    cast r30 into r31 as u64;
    is.eq r0.perm.perm1[0u32] r1.perm1[0u32].k into r32;
    assert.eq r32 true;
    is.eq r0.perm.perm2[0u32] r1.perm2[0u32].k into r33;
    assert.eq r33 true;
    is.eq r0.perm.perm1[1u32] r1.perm1[1u32].k into r34;
    assert.eq r34 true;
    is.eq r0.perm.perm2[1u32] r1.perm2[1u32].k into r35;
    assert.eq r35 true;
    is.eq r0.perm.perm1[2u32] r1.perm1[2u32].k into r36;
    assert.eq r36 true;
    is.eq r0.perm.perm2[2u32] r1.perm2[2u32].k into r37;
    assert.eq r37 true;
    is.eq r0.perm.perm1[3u32] r1.perm1[3u32].k into r38;
    assert.eq r38 true;
    is.eq r0.perm.perm2[3u32] r1.perm2[3u32].k into r39;
    assert.eq r39 true;
    is.eq r0.perm.perm1[4u32] r1.perm1[4u32].k into r40;
    assert.eq r40 true;
    is.eq r0.perm.perm2[4u32] r1.perm2[4u32].k into r41;
    assert.eq r41 true;
    is.eq r0.perm.perm1[5u32] r1.perm1[5u32].k into r42;
    assert.eq r42 true;
    is.eq r0.perm.perm2[5u32] r1.perm2[5u32].k into r43;
    assert.eq r43 true;
    is.eq r0.perm.perm1[6u32] r1.perm1[6u32].k into r44;
    assert.eq r44 true;
    is.eq r0.perm.perm2[6u32] r1.perm2[6u32].k into r45;
    assert.eq r45 true;
    is.eq r0.perm.perm1[7u32] r1.perm1[7u32].k into r46;
    assert.eq r46 true;
    is.eq r0.perm.perm2[7u32] r1.perm2[7u32].k into r47;
    assert.eq r47 true;
    is.eq r0.perm.perm1[8u32] r1.perm1[8u32].k into r48;
    assert.eq r48 true;
    is.eq r0.perm.perm2[8u32] r1.perm2[8u32].k into r49;
    assert.eq r49 true;
    is.eq r0.perm.perm1[9u32] r1.perm1[9u32].k into r50;
    assert.eq r50 true;
    is.eq r0.perm.perm2[9u32] r1.perm2[9u32].k into r51;
    assert.eq r51 true;
    is.eq r0.perm.perm1[10u32] r1.perm1[10u32].k into r52;
    assert.eq r52 true;
    is.eq r0.perm.perm2[10u32] r1.perm2[10u32].k into r53;
    assert.eq r53 true;
    is.eq r0.perm.perm1[11u32] r1.perm1[11u32].k into r54;
    assert.eq r54 true;
    is.eq r0.perm.perm2[11u32] r1.perm2[11u32].k into r55;
    assert.eq r55 true;
    is.eq r0.perm.perm1[12u32] r1.perm1[12u32].k into r56;
    assert.eq r56 true;
    is.eq r0.perm.perm2[12u32] r1.perm2[12u32].k into r57;
    assert.eq r57 true;
    is.eq r0.perm.perm1[13u32] r1.perm1[13u32].k into r58;
    assert.eq r58 true;
    is.eq r0.perm.perm2[13u32] r1.perm2[13u32].k into r59;
    assert.eq r59 true;
    is.eq r0.perm.perm1[14u32] r1.perm1[14u32].k into r60;
    assert.eq r60 true;
    is.eq r0.perm.perm2[14u32] r1.perm2[14u32].k into r61;
    assert.eq r61 true;
    is.eq r0.perm.perm1[15u32] r1.perm1[15u32].k into r62;
    assert.eq r62 true;
    is.eq r0.perm.perm2[15u32] r1.perm2[15u32].k into r63;
    assert.eq r63 true;
    is.eq r0.perm.perm1[16u32] r1.perm1[16u32].k into r64;
    assert.eq r64 true;
    is.eq r0.perm.perm2[16u32] r1.perm2[16u32].k into r65;
    assert.eq r65 true;
    is.eq r0.perm.perm1[17u32] r1.perm1[17u32].k into r66;
    assert.eq r66 true;
    is.eq r0.perm.perm2[17u32] r1.perm2[17u32].k into r67;
    assert.eq r67 true;
    is.eq r0.perm.perm1[18u32] r1.perm1[18u32].k into r68;
    assert.eq r68 true;
    is.eq r0.perm.perm2[18u32] r1.perm2[18u32].k into r69;
    assert.eq r69 true;
    is.eq r0.perm.perm1[19u32] r1.perm1[19u32].k into r70;
    assert.eq r70 true;
    is.eq r0.perm.perm2[19u32] r1.perm2[19u32].k into r71;
    assert.eq r71 true;
    is.eq r0.perm.perm1[20u32] r1.perm1[20u32].k into r72;
    assert.eq r72 true;
    is.eq r0.perm.perm2[20u32] r1.perm2[20u32].k into r73;
    assert.eq r73 true;
    is.eq r0.perm.perm1[21u32] r1.perm1[21u32].k into r74;
    assert.eq r74 true;
    is.eq r0.perm.perm2[21u32] r1.perm2[21u32].k into r75;
    assert.eq r75 true;
    is.eq r0.perm.perm1[22u32] r1.perm1[22u32].k into r76;
    assert.eq r76 true;
    is.eq r0.perm.perm2[22u32] r1.perm2[22u32].k into r77;
    assert.eq r77 true;
    is.eq r0.perm.perm1[23u32] r1.perm1[23u32].k into r78;
    assert.eq r78 true;
    is.eq r0.perm.perm2[23u32] r1.perm2[23u32].k into r79;
    assert.eq r79 true;
    is.eq r0.perm.perm1[24u32] r1.perm1[24u32].k into r80;
    assert.eq r80 true;
    is.eq r0.perm.perm2[24u32] r1.perm2[24u32].k into r81;
    assert.eq r81 true;
    is.eq r0.perm.perm1[25u32] r1.perm1[25u32].k into r82;
    assert.eq r82 true;
    is.eq r0.perm.perm2[25u32] r1.perm2[25u32].k into r83;
    assert.eq r83 true;
    cast  r1.perm1[0u32].v r1.perm1[1u32].v r1.perm1[2u32].v r1.perm1[3u32].v r1.perm1[4u32].v r1.perm1[5u32].v r1.perm1[6u32].v r1.perm1[7u32].v r1.perm1[8u32].v r1.perm1[9u32].v r1.perm1[10u32].v r1.perm1[11u32].v r1.perm1[12u32].v r1.perm1[13u32].v r1.perm1[14u32].v r1.perm1[15u32].v r1.perm1[16u32].v r1.perm1[17u32].v r1.perm1[18u32].v r1.perm1[19u32].v r1.perm1[20u32].v r1.perm1[21u32].v r1.perm1[22u32].v r1.perm1[23u32].v r1.perm1[24u32].v r1.perm1[25u32].v into r84 as [u8; 26u32];
    cast  r1.perm2[0u32].v r1.perm2[1u32].v r1.perm2[2u32].v r1.perm2[3u32].v r1.perm2[4u32].v r1.perm2[5u32].v r1.perm2[6u32].v r1.perm2[7u32].v r1.perm2[8u32].v r1.perm2[9u32].v r1.perm2[10u32].v r1.perm2[11u32].v r1.perm2[12u32].v r1.perm2[13u32].v r1.perm2[14u32].v r1.perm2[15u32].v r1.perm2[16u32].v r1.perm2[17u32].v r1.perm2[18u32].v r1.perm2[19u32].v r1.perm2[20u32].v r1.perm2[21u32].v r1.perm2[22u32].v r1.perm2[23u32].v r1.perm2[24u32].v r1.perm2[25u32].v into r85 as [u8; 26u32];
    cast r84 r85 into r86 as Permutation;
    is.eq r86.perm1[0u32] r3.perm1[0u32].k into r87;
    assert.eq r87 true;
    is.eq r86.perm2[0u32] r3.perm2[0u32].k into r88;
    assert.eq r88 true;
    is.eq r86.perm1[1u32] r3.perm1[1u32].k into r89;
    assert.eq r89 true;
    is.eq r86.perm2[1u32] r3.perm2[1u32].k into r90;
    assert.eq r90 true;
    is.eq r86.perm1[2u32] r3.perm1[2u32].k into r91;
    assert.eq r91 true;
    is.eq r86.perm2[2u32] r3.perm2[2u32].k into r92;
    assert.eq r92 true;
    is.eq r86.perm1[3u32] r3.perm1[3u32].k into r93;
    assert.eq r93 true;
    is.eq r86.perm2[3u32] r3.perm2[3u32].k into r94;
    assert.eq r94 true;
    is.eq r86.perm1[4u32] r3.perm1[4u32].k into r95;
    assert.eq r95 true;
    is.eq r86.perm2[4u32] r3.perm2[4u32].k into r96;
    assert.eq r96 true;
    is.eq r86.perm1[5u32] r3.perm1[5u32].k into r97;
    assert.eq r97 true;
    is.eq r86.perm2[5u32] r3.perm2[5u32].k into r98;
    assert.eq r98 true;
    is.eq r86.perm1[6u32] r3.perm1[6u32].k into r99;
    assert.eq r99 true;
    is.eq r86.perm2[6u32] r3.perm2[6u32].k into r100;
    assert.eq r100 true;
    is.eq r86.perm1[7u32] r3.perm1[7u32].k into r101;
    assert.eq r101 true;
    is.eq r86.perm2[7u32] r3.perm2[7u32].k into r102;
    assert.eq r102 true;
    is.eq r86.perm1[8u32] r3.perm1[8u32].k into r103;
    assert.eq r103 true;
    is.eq r86.perm2[8u32] r3.perm2[8u32].k into r104;
    assert.eq r104 true;
    is.eq r86.perm1[9u32] r3.perm1[9u32].k into r105;
    assert.eq r105 true;
    is.eq r86.perm2[9u32] r3.perm2[9u32].k into r106;
    assert.eq r106 true;
    is.eq r86.perm1[10u32] r3.perm1[10u32].k into r107;
    assert.eq r107 true;
    is.eq r86.perm2[10u32] r3.perm2[10u32].k into r108;
    assert.eq r108 true;
    is.eq r86.perm1[11u32] r3.perm1[11u32].k into r109;
    assert.eq r109 true;
    is.eq r86.perm2[11u32] r3.perm2[11u32].k into r110;
    assert.eq r110 true;
    is.eq r86.perm1[12u32] r3.perm1[12u32].k into r111;
    assert.eq r111 true;
    is.eq r86.perm2[12u32] r3.perm2[12u32].k into r112;
    assert.eq r112 true;
    is.eq r86.perm1[13u32] r3.perm1[13u32].k into r113;
    assert.eq r113 true;
    is.eq r86.perm2[13u32] r3.perm2[13u32].k into r114;
    assert.eq r114 true;
    is.eq r86.perm1[14u32] r3.perm1[14u32].k into r115;
    assert.eq r115 true;
    is.eq r86.perm2[14u32] r3.perm2[14u32].k into r116;
    assert.eq r116 true;
    is.eq r86.perm1[15u32] r3.perm1[15u32].k into r117;
    assert.eq r117 true;
    is.eq r86.perm2[15u32] r3.perm2[15u32].k into r118;
    assert.eq r118 true;
    is.eq r86.perm1[16u32] r3.perm1[16u32].k into r119;
    assert.eq r119 true;
    is.eq r86.perm2[16u32] r3.perm2[16u32].k into r120;
    assert.eq r120 true;
    is.eq r86.perm1[17u32] r3.perm1[17u32].k into r121;
    assert.eq r121 true;
    is.eq r86.perm2[17u32] r3.perm2[17u32].k into r122;
    assert.eq r122 true;
    is.eq r86.perm1[18u32] r3.perm1[18u32].k into r123;
    assert.eq r123 true;
    is.eq r86.perm2[18u32] r3.perm2[18u32].k into r124;
    assert.eq r124 true;
    is.eq r86.perm1[19u32] r3.perm1[19u32].k into r125;
    assert.eq r125 true;
    is.eq r86.perm2[19u32] r3.perm2[19u32].k into r126;
    assert.eq r126 true;
    is.eq r86.perm1[20u32] r3.perm1[20u32].k into r127;
    assert.eq r127 true;
    is.eq r86.perm2[20u32] r3.perm2[20u32].k into r128;
    assert.eq r128 true;
    is.eq r86.perm1[21u32] r3.perm1[21u32].k into r129;
    assert.eq r129 true;
    is.eq r86.perm2[21u32] r3.perm2[21u32].k into r130;
    assert.eq r130 true;
    is.eq r86.perm1[22u32] r3.perm1[22u32].k into r131;
    assert.eq r131 true;
    is.eq r86.perm2[22u32] r3.perm2[22u32].k into r132;
    assert.eq r132 true;
    is.eq r86.perm1[23u32] r3.perm1[23u32].k into r133;
    assert.eq r133 true;
    is.eq r86.perm2[23u32] r3.perm2[23u32].k into r134;
    assert.eq r134 true;
    is.eq r86.perm1[24u32] r3.perm1[24u32].k into r135;
    assert.eq r135 true;
    is.eq r86.perm2[24u32] r3.perm2[24u32].k into r136;
    assert.eq r136 true;
    is.eq r86.perm1[25u32] r3.perm1[25u32].k into r137;
    assert.eq r137 true;
    is.eq r86.perm2[25u32] r3.perm2[25u32].k into r138;
    assert.eq r138 true;
    cast  r3.perm1[0u32].v r3.perm1[1u32].v r3.perm1[2u32].v r3.perm1[3u32].v r3.perm1[4u32].v r3.perm1[5u32].v r3.perm1[6u32].v r3.perm1[7u32].v r3.perm1[8u32].v r3.perm1[9u32].v r3.perm1[10u32].v r3.perm1[11u32].v r3.perm1[12u32].v r3.perm1[13u32].v r3.perm1[14u32].v r3.perm1[15u32].v r3.perm1[16u32].v r3.perm1[17u32].v r3.perm1[18u32].v r3.perm1[19u32].v r3.perm1[20u32].v r3.perm1[21u32].v r3.perm1[22u32].v r3.perm1[23u32].v r3.perm1[24u32].v r3.perm1[25u32].v into r139 as [u8; 26u32];
    cast  r3.perm2[0u32].v r3.perm2[1u32].v r3.perm2[2u32].v r3.perm2[3u32].v r3.perm2[4u32].v r3.perm2[5u32].v r3.perm2[6u32].v r3.perm2[7u32].v r3.perm2[8u32].v r3.perm2[9u32].v r3.perm2[10u32].v r3.perm2[11u32].v r3.perm2[12u32].v r3.perm2[13u32].v r3.perm2[14u32].v r3.perm2[15u32].v r3.perm2[16u32].v r3.perm2[17u32].v r3.perm2[18u32].v r3.perm2[19u32].v r3.perm2[20u32].v r3.perm2[21u32].v r3.perm2[22u32].v r3.perm2[23u32].v r3.perm2[24u32].v r3.perm2[25u32].v into r140 as [u8; 26u32];
    cast r139 r140 into r141 as Permutation;
    is.eq r141.perm1[0u32] r5.perm1[0u32].k into r142;
    assert.eq r142 true;
    is.eq r141.perm2[0u32] r5.perm2[0u32].k into r143;
    assert.eq r143 true;
    is.eq r141.perm1[1u32] r5.perm1[1u32].k into r144;
    assert.eq r144 true;
    is.eq r141.perm2[1u32] r5.perm2[1u32].k into r145;
    assert.eq r145 true;
    is.eq r141.perm1[2u32] r5.perm1[2u32].k into r146;
    assert.eq r146 true;
    is.eq r141.perm2[2u32] r5.perm2[2u32].k into r147;
    assert.eq r147 true;
    is.eq r141.perm1[3u32] r5.perm1[3u32].k into r148;
    assert.eq r148 true;
    is.eq r141.perm2[3u32] r5.perm2[3u32].k into r149;
    assert.eq r149 true;
    is.eq r141.perm1[4u32] r5.perm1[4u32].k into r150;
    assert.eq r150 true;
    is.eq r141.perm2[4u32] r5.perm2[4u32].k into r151;
    assert.eq r151 true;
    is.eq r141.perm1[5u32] r5.perm1[5u32].k into r152;
    assert.eq r152 true;
    is.eq r141.perm2[5u32] r5.perm2[5u32].k into r153;
    assert.eq r153 true;
    is.eq r141.perm1[6u32] r5.perm1[6u32].k into r154;
    assert.eq r154 true;
    is.eq r141.perm2[6u32] r5.perm2[6u32].k into r155;
    assert.eq r155 true;
    is.eq r141.perm1[7u32] r5.perm1[7u32].k into r156;
    assert.eq r156 true;
    is.eq r141.perm2[7u32] r5.perm2[7u32].k into r157;
    assert.eq r157 true;
    is.eq r141.perm1[8u32] r5.perm1[8u32].k into r158;
    assert.eq r158 true;
    is.eq r141.perm2[8u32] r5.perm2[8u32].k into r159;
    assert.eq r159 true;
    is.eq r141.perm1[9u32] r5.perm1[9u32].k into r160;
    assert.eq r160 true;
    is.eq r141.perm2[9u32] r5.perm2[9u32].k into r161;
    assert.eq r161 true;
    is.eq r141.perm1[10u32] r5.perm1[10u32].k into r162;
    assert.eq r162 true;
    is.eq r141.perm2[10u32] r5.perm2[10u32].k into r163;
    assert.eq r163 true;
    is.eq r141.perm1[11u32] r5.perm1[11u32].k into r164;
    assert.eq r164 true;
    is.eq r141.perm2[11u32] r5.perm2[11u32].k into r165;
    assert.eq r165 true;
    is.eq r141.perm1[12u32] r5.perm1[12u32].k into r166;
    assert.eq r166 true;
    is.eq r141.perm2[12u32] r5.perm2[12u32].k into r167;
    assert.eq r167 true;
    is.eq r141.perm1[13u32] r5.perm1[13u32].k into r168;
    assert.eq r168 true;
    is.eq r141.perm2[13u32] r5.perm2[13u32].k into r169;
    assert.eq r169 true;
    is.eq r141.perm1[14u32] r5.perm1[14u32].k into r170;
    assert.eq r170 true;
    is.eq r141.perm2[14u32] r5.perm2[14u32].k into r171;
    assert.eq r171 true;
    is.eq r141.perm1[15u32] r5.perm1[15u32].k into r172;
    assert.eq r172 true;
    is.eq r141.perm2[15u32] r5.perm2[15u32].k into r173;
    assert.eq r173 true;
    is.eq r141.perm1[16u32] r5.perm1[16u32].k into r174;
    assert.eq r174 true;
    is.eq r141.perm2[16u32] r5.perm2[16u32].k into r175;
    assert.eq r175 true;
    is.eq r141.perm1[17u32] r5.perm1[17u32].k into r176;
    assert.eq r176 true;
    is.eq r141.perm2[17u32] r5.perm2[17u32].k into r177;
    assert.eq r177 true;
    is.eq r141.perm1[18u32] r5.perm1[18u32].k into r178;
    assert.eq r178 true;
    is.eq r141.perm2[18u32] r5.perm2[18u32].k into r179;
    assert.eq r179 true;
    is.eq r141.perm1[19u32] r5.perm1[19u32].k into r180;
    assert.eq r180 true;
    is.eq r141.perm2[19u32] r5.perm2[19u32].k into r181;
    assert.eq r181 true;
    is.eq r141.perm1[20u32] r5.perm1[20u32].k into r182;
    assert.eq r182 true;
    is.eq r141.perm2[20u32] r5.perm2[20u32].k into r183;
    assert.eq r183 true;
    is.eq r141.perm1[21u32] r5.perm1[21u32].k into r184;
    assert.eq r184 true;
    is.eq r141.perm2[21u32] r5.perm2[21u32].k into r185;
    assert.eq r185 true;
    is.eq r141.perm1[22u32] r5.perm1[22u32].k into r186;
    assert.eq r186 true;
    is.eq r141.perm2[22u32] r5.perm2[22u32].k into r187;
    assert.eq r187 true;
    is.eq r141.perm1[23u32] r5.perm1[23u32].k into r188;
    assert.eq r188 true;
    is.eq r141.perm2[23u32] r5.perm2[23u32].k into r189;
    assert.eq r189 true;
    is.eq r141.perm1[24u32] r5.perm1[24u32].k into r190;
    assert.eq r190 true;
    is.eq r141.perm2[24u32] r5.perm2[24u32].k into r191;
    assert.eq r191 true;
    is.eq r141.perm1[25u32] r5.perm1[25u32].k into r192;
    assert.eq r192 true;
    is.eq r141.perm2[25u32] r5.perm2[25u32].k into r193;
    assert.eq r193 true;
    cast  r5.perm1[0u32].v r5.perm1[1u32].v r5.perm1[2u32].v r5.perm1[3u32].v r5.perm1[4u32].v r5.perm1[5u32].v r5.perm1[6u32].v r5.perm1[7u32].v r5.perm1[8u32].v r5.perm1[9u32].v r5.perm1[10u32].v r5.perm1[11u32].v r5.perm1[12u32].v r5.perm1[13u32].v r5.perm1[14u32].v r5.perm1[15u32].v r5.perm1[16u32].v r5.perm1[17u32].v r5.perm1[18u32].v r5.perm1[19u32].v r5.perm1[20u32].v r5.perm1[21u32].v r5.perm1[22u32].v r5.perm1[23u32].v r5.perm1[24u32].v r5.perm1[25u32].v into r194 as [u8; 26u32];
    cast  r5.perm2[0u32].v r5.perm2[1u32].v r5.perm2[2u32].v r5.perm2[3u32].v r5.perm2[4u32].v r5.perm2[5u32].v r5.perm2[6u32].v r5.perm2[7u32].v r5.perm2[8u32].v r5.perm2[9u32].v r5.perm2[10u32].v r5.perm2[11u32].v r5.perm2[12u32].v r5.perm2[13u32].v r5.perm2[14u32].v r5.perm2[15u32].v r5.perm2[16u32].v r5.perm2[17u32].v r5.perm2[18u32].v r5.perm2[19u32].v r5.perm2[20u32].v r5.perm2[21u32].v r5.perm2[22u32].v r5.perm2[23u32].v r5.perm2[24u32].v r5.perm2[25u32].v into r195 as [u8; 26u32];
    cast r194 r195 into r196 as Permutation;
    is.eq r196.perm1[0u32] r7.perm1[0u32].k into r197;
    assert.eq r197 true;
    is.eq r196.perm2[0u32] r7.perm2[0u32].k into r198;
    assert.eq r198 true;
    is.eq r196.perm1[1u32] r7.perm1[1u32].k into r199;
    assert.eq r199 true;
    is.eq r196.perm2[1u32] r7.perm2[1u32].k into r200;
    assert.eq r200 true;
    is.eq r196.perm1[2u32] r7.perm1[2u32].k into r201;
    assert.eq r201 true;
    is.eq r196.perm2[2u32] r7.perm2[2u32].k into r202;
    assert.eq r202 true;
    is.eq r196.perm1[3u32] r7.perm1[3u32].k into r203;
    assert.eq r203 true;
    is.eq r196.perm2[3u32] r7.perm2[3u32].k into r204;
    assert.eq r204 true;
    is.eq r196.perm1[4u32] r7.perm1[4u32].k into r205;
    assert.eq r205 true;
    is.eq r196.perm2[4u32] r7.perm2[4u32].k into r206;
    assert.eq r206 true;
    is.eq r196.perm1[5u32] r7.perm1[5u32].k into r207;
    assert.eq r207 true;
    is.eq r196.perm2[5u32] r7.perm2[5u32].k into r208;
    assert.eq r208 true;
    is.eq r196.perm1[6u32] r7.perm1[6u32].k into r209;
    assert.eq r209 true;
    is.eq r196.perm2[6u32] r7.perm2[6u32].k into r210;
    assert.eq r210 true;
    is.eq r196.perm1[7u32] r7.perm1[7u32].k into r211;
    assert.eq r211 true;
    is.eq r196.perm2[7u32] r7.perm2[7u32].k into r212;
    assert.eq r212 true;
    is.eq r196.perm1[8u32] r7.perm1[8u32].k into r213;
    assert.eq r213 true;
    is.eq r196.perm2[8u32] r7.perm2[8u32].k into r214;
    assert.eq r214 true;
    is.eq r196.perm1[9u32] r7.perm1[9u32].k into r215;
    assert.eq r215 true;
    is.eq r196.perm2[9u32] r7.perm2[9u32].k into r216;
    assert.eq r216 true;
    is.eq r196.perm1[10u32] r7.perm1[10u32].k into r217;
    assert.eq r217 true;
    is.eq r196.perm2[10u32] r7.perm2[10u32].k into r218;
    assert.eq r218 true;
    is.eq r196.perm1[11u32] r7.perm1[11u32].k into r219;
    assert.eq r219 true;
    is.eq r196.perm2[11u32] r7.perm2[11u32].k into r220;
    assert.eq r220 true;
    is.eq r196.perm1[12u32] r7.perm1[12u32].k into r221;
    assert.eq r221 true;
    is.eq r196.perm2[12u32] r7.perm2[12u32].k into r222;
    assert.eq r222 true;
    is.eq r196.perm1[13u32] r7.perm1[13u32].k into r223;
    assert.eq r223 true;
    is.eq r196.perm2[13u32] r7.perm2[13u32].k into r224;
    assert.eq r224 true;
    is.eq r196.perm1[14u32] r7.perm1[14u32].k into r225;
    assert.eq r225 true;
    is.eq r196.perm2[14u32] r7.perm2[14u32].k into r226;
    assert.eq r226 true;
    is.eq r196.perm1[15u32] r7.perm1[15u32].k into r227;
    assert.eq r227 true;
    is.eq r196.perm2[15u32] r7.perm2[15u32].k into r228;
    assert.eq r228 true;
    is.eq r196.perm1[16u32] r7.perm1[16u32].k into r229;
    assert.eq r229 true;
    is.eq r196.perm2[16u32] r7.perm2[16u32].k into r230;
    assert.eq r230 true;
    is.eq r196.perm1[17u32] r7.perm1[17u32].k into r231;
    assert.eq r231 true;
    is.eq r196.perm2[17u32] r7.perm2[17u32].k into r232;
    assert.eq r232 true;
    is.eq r196.perm1[18u32] r7.perm1[18u32].k into r233;
    assert.eq r233 true;
    is.eq r196.perm2[18u32] r7.perm2[18u32].k into r234;
    assert.eq r234 true;
    is.eq r196.perm1[19u32] r7.perm1[19u32].k into r235;
    assert.eq r235 true;
    is.eq r196.perm2[19u32] r7.perm2[19u32].k into r236;
    assert.eq r236 true;
    is.eq r196.perm1[20u32] r7.perm1[20u32].k into r237;
    assert.eq r237 true;
    is.eq r196.perm2[20u32] r7.perm2[20u32].k into r238;
    assert.eq r238 true;
    is.eq r196.perm1[21u32] r7.perm1[21u32].k into r239;
    assert.eq r239 true;
    is.eq r196.perm2[21u32] r7.perm2[21u32].k into r240;
    assert.eq r240 true;
    is.eq r196.perm1[22u32] r7.perm1[22u32].k into r241;
    assert.eq r241 true;
    is.eq r196.perm2[22u32] r7.perm2[22u32].k into r242;
    assert.eq r242 true;
    is.eq r196.perm1[23u32] r7.perm1[23u32].k into r243;
    assert.eq r243 true;
    is.eq r196.perm2[23u32] r7.perm2[23u32].k into r244;
    assert.eq r244 true;
    is.eq r196.perm1[24u32] r7.perm1[24u32].k into r245;
    assert.eq r245 true;
    is.eq r196.perm2[24u32] r7.perm2[24u32].k into r246;
    assert.eq r246 true;
    is.eq r196.perm1[25u32] r7.perm1[25u32].k into r247;
    assert.eq r247 true;
    is.eq r196.perm2[25u32] r7.perm2[25u32].k into r248;
    assert.eq r248 true;
    cast  r7.perm1[0u32].v r7.perm1[1u32].v r7.perm1[2u32].v r7.perm1[3u32].v r7.perm1[4u32].v r7.perm1[5u32].v r7.perm1[6u32].v r7.perm1[7u32].v r7.perm1[8u32].v r7.perm1[9u32].v r7.perm1[10u32].v r7.perm1[11u32].v r7.perm1[12u32].v r7.perm1[13u32].v r7.perm1[14u32].v r7.perm1[15u32].v r7.perm1[16u32].v r7.perm1[17u32].v r7.perm1[18u32].v r7.perm1[19u32].v r7.perm1[20u32].v r7.perm1[21u32].v r7.perm1[22u32].v r7.perm1[23u32].v r7.perm1[24u32].v r7.perm1[25u32].v into r249 as [u8; 26u32];
    cast  r7.perm2[0u32].v r7.perm2[1u32].v r7.perm2[2u32].v r7.perm2[3u32].v r7.perm2[4u32].v r7.perm2[5u32].v r7.perm2[6u32].v r7.perm2[7u32].v r7.perm2[8u32].v r7.perm2[9u32].v r7.perm2[10u32].v r7.perm2[11u32].v r7.perm2[12u32].v r7.perm2[13u32].v r7.perm2[14u32].v r7.perm2[15u32].v r7.perm2[16u32].v r7.perm2[17u32].v r7.perm2[18u32].v r7.perm2[19u32].v r7.perm2[20u32].v r7.perm2[21u32].v r7.perm2[22u32].v r7.perm2[23u32].v r7.perm2[24u32].v r7.perm2[25u32].v into r250 as [u8; 26u32];
    cast r249 r250 into r251 as Permutation;
    is.eq r251.perm1[0u32] r9.perm1[0u32].k into r252;
    assert.eq r252 true;
    is.eq r251.perm2[0u32] r9.perm2[0u32].k into r253;
    assert.eq r253 true;
    is.eq r251.perm1[1u32] r9.perm1[1u32].k into r254;
    assert.eq r254 true;
    is.eq r251.perm2[1u32] r9.perm2[1u32].k into r255;
    assert.eq r255 true;
    is.eq r251.perm1[2u32] r9.perm1[2u32].k into r256;
    assert.eq r256 true;
    is.eq r251.perm2[2u32] r9.perm2[2u32].k into r257;
    assert.eq r257 true;
    is.eq r251.perm1[3u32] r9.perm1[3u32].k into r258;
    assert.eq r258 true;
    is.eq r251.perm2[3u32] r9.perm2[3u32].k into r259;
    assert.eq r259 true;
    is.eq r251.perm1[4u32] r9.perm1[4u32].k into r260;
    assert.eq r260 true;
    is.eq r251.perm2[4u32] r9.perm2[4u32].k into r261;
    assert.eq r261 true;
    is.eq r251.perm1[5u32] r9.perm1[5u32].k into r262;
    assert.eq r262 true;
    is.eq r251.perm2[5u32] r9.perm2[5u32].k into r263;
    assert.eq r263 true;
    is.eq r251.perm1[6u32] r9.perm1[6u32].k into r264;
    assert.eq r264 true;
    is.eq r251.perm2[6u32] r9.perm2[6u32].k into r265;
    assert.eq r265 true;
    is.eq r251.perm1[7u32] r9.perm1[7u32].k into r266;
    assert.eq r266 true;
    is.eq r251.perm2[7u32] r9.perm2[7u32].k into r267;
    assert.eq r267 true;
    is.eq r251.perm1[8u32] r9.perm1[8u32].k into r268;
    assert.eq r268 true;
    is.eq r251.perm2[8u32] r9.perm2[8u32].k into r269;
    assert.eq r269 true;
    is.eq r251.perm1[9u32] r9.perm1[9u32].k into r270;
    assert.eq r270 true;
    is.eq r251.perm2[9u32] r9.perm2[9u32].k into r271;
    assert.eq r271 true;
    is.eq r251.perm1[10u32] r9.perm1[10u32].k into r272;
    assert.eq r272 true;
    is.eq r251.perm2[10u32] r9.perm2[10u32].k into r273;
    assert.eq r273 true;
    is.eq r251.perm1[11u32] r9.perm1[11u32].k into r274;
    assert.eq r274 true;
    is.eq r251.perm2[11u32] r9.perm2[11u32].k into r275;
    assert.eq r275 true;
    is.eq r251.perm1[12u32] r9.perm1[12u32].k into r276;
    assert.eq r276 true;
    is.eq r251.perm2[12u32] r9.perm2[12u32].k into r277;
    assert.eq r277 true;
    is.eq r251.perm1[13u32] r9.perm1[13u32].k into r278;
    assert.eq r278 true;
    is.eq r251.perm2[13u32] r9.perm2[13u32].k into r279;
    assert.eq r279 true;
    is.eq r251.perm1[14u32] r9.perm1[14u32].k into r280;
    assert.eq r280 true;
    is.eq r251.perm2[14u32] r9.perm2[14u32].k into r281;
    assert.eq r281 true;
    is.eq r251.perm1[15u32] r9.perm1[15u32].k into r282;
    assert.eq r282 true;
    is.eq r251.perm2[15u32] r9.perm2[15u32].k into r283;
    assert.eq r283 true;
    is.eq r251.perm1[16u32] r9.perm1[16u32].k into r284;
    assert.eq r284 true;
    is.eq r251.perm2[16u32] r9.perm2[16u32].k into r285;
    assert.eq r285 true;
    is.eq r251.perm1[17u32] r9.perm1[17u32].k into r286;
    assert.eq r286 true;
    is.eq r251.perm2[17u32] r9.perm2[17u32].k into r287;
    assert.eq r287 true;
    is.eq r251.perm1[18u32] r9.perm1[18u32].k into r288;
    assert.eq r288 true;
    is.eq r251.perm2[18u32] r9.perm2[18u32].k into r289;
    assert.eq r289 true;
    is.eq r251.perm1[19u32] r9.perm1[19u32].k into r290;
    assert.eq r290 true;
    is.eq r251.perm2[19u32] r9.perm2[19u32].k into r291;
    assert.eq r291 true;
    is.eq r251.perm1[20u32] r9.perm1[20u32].k into r292;
    assert.eq r292 true;
    is.eq r251.perm2[20u32] r9.perm2[20u32].k into r293;
    assert.eq r293 true;
    is.eq r251.perm1[21u32] r9.perm1[21u32].k into r294;
    assert.eq r294 true;
    is.eq r251.perm2[21u32] r9.perm2[21u32].k into r295;
    assert.eq r295 true;
    is.eq r251.perm1[22u32] r9.perm1[22u32].k into r296;
    assert.eq r296 true;
    is.eq r251.perm2[22u32] r9.perm2[22u32].k into r297;
    assert.eq r297 true;
    is.eq r251.perm1[23u32] r9.perm1[23u32].k into r298;
    assert.eq r298 true;
    is.eq r251.perm2[23u32] r9.perm2[23u32].k into r299;
    assert.eq r299 true;
    is.eq r251.perm1[24u32] r9.perm1[24u32].k into r300;
    assert.eq r300 true;
    is.eq r251.perm2[24u32] r9.perm2[24u32].k into r301;
    assert.eq r301 true;
    is.eq r251.perm1[25u32] r9.perm1[25u32].k into r302;
    assert.eq r302 true;
    is.eq r251.perm2[25u32] r9.perm2[25u32].k into r303;
    assert.eq r303 true;
    cast  r9.perm1[0u32].v r9.perm1[1u32].v r9.perm1[2u32].v r9.perm1[3u32].v r9.perm1[4u32].v r9.perm1[5u32].v r9.perm1[6u32].v r9.perm1[7u32].v r9.perm1[8u32].v r9.perm1[9u32].v r9.perm1[10u32].v r9.perm1[11u32].v r9.perm1[12u32].v r9.perm1[13u32].v r9.perm1[14u32].v r9.perm1[15u32].v r9.perm1[16u32].v r9.perm1[17u32].v r9.perm1[18u32].v r9.perm1[19u32].v r9.perm1[20u32].v r9.perm1[21u32].v r9.perm1[22u32].v r9.perm1[23u32].v r9.perm1[24u32].v r9.perm1[25u32].v into r304 as [u8; 26u32];
    cast  r9.perm2[0u32].v r9.perm2[1u32].v r9.perm2[2u32].v r9.perm2[3u32].v r9.perm2[4u32].v r9.perm2[5u32].v r9.perm2[6u32].v r9.perm2[7u32].v r9.perm2[8u32].v r9.perm2[9u32].v r9.perm2[10u32].v r9.perm2[11u32].v r9.perm2[12u32].v r9.perm2[13u32].v r9.perm2[14u32].v r9.perm2[15u32].v r9.perm2[16u32].v r9.perm2[17u32].v r9.perm2[18u32].v r9.perm2[19u32].v r9.perm2[20u32].v r9.perm2[21u32].v r9.perm2[22u32].v r9.perm2[23u32].v r9.perm2[24u32].v r9.perm2[25u32].v into r305 as [u8; 26u32];
    cast r304 r305 into r306 as Permutation;
    is.eq r10.cards1[0u32].index r306.perm1[0u32] into r307;
    assert.eq r307 true;
    is.eq r10.cards2[0u32].index r306.perm2[0u32] into r308;
    assert.eq r308 true;
    is.eq r10.cards1[1u32].index r306.perm1[1u32] into r309;
    assert.eq r309 true;
    is.eq r10.cards2[1u32].index r306.perm2[1u32] into r310;
    assert.eq r310 true;
    is.eq r10.cards1[2u32].index r306.perm1[2u32] into r311;
    assert.eq r311 true;
    is.eq r10.cards2[2u32].index r306.perm2[2u32] into r312;
    assert.eq r312 true;
    is.eq r10.cards1[3u32].index r306.perm1[3u32] into r313;
    assert.eq r313 true;
    is.eq r10.cards2[3u32].index r306.perm2[3u32] into r314;
    assert.eq r314 true;
    is.eq r10.cards1[4u32].index r306.perm1[4u32] into r315;
    assert.eq r315 true;
    is.eq r10.cards2[4u32].index r306.perm2[4u32] into r316;
    assert.eq r316 true;
    is.eq r10.cards1[5u32].index r306.perm1[5u32] into r317;
    assert.eq r317 true;
    is.eq r10.cards2[5u32].index r306.perm2[5u32] into r318;
    assert.eq r318 true;
    is.eq r10.cards1[6u32].index r306.perm1[6u32] into r319;
    assert.eq r319 true;
    is.eq r10.cards2[6u32].index r306.perm2[6u32] into r320;
    assert.eq r320 true;
    is.eq r10.cards1[7u32].index r306.perm1[7u32] into r321;
    assert.eq r321 true;
    is.eq r10.cards2[7u32].index r306.perm2[7u32] into r322;
    assert.eq r322 true;
    is.eq r10.cards1[8u32].index r306.perm1[8u32] into r323;
    assert.eq r323 true;
    is.eq r10.cards2[8u32].index r306.perm2[8u32] into r324;
    assert.eq r324 true;
    is.eq r10.cards1[9u32].index r306.perm1[9u32] into r325;
    assert.eq r325 true;
    is.eq r10.cards2[9u32].index r306.perm2[9u32] into r326;
    assert.eq r326 true;
    is.eq r10.cards1[10u32].index r306.perm1[10u32] into r327;
    assert.eq r327 true;
    is.eq r10.cards2[10u32].index r306.perm2[10u32] into r328;
    assert.eq r328 true;
    is.eq r10.cards1[11u32].index r306.perm1[11u32] into r329;
    assert.eq r329 true;
    is.eq r10.cards2[11u32].index r306.perm2[11u32] into r330;
    assert.eq r330 true;
    is.eq r10.cards1[12u32].index r306.perm1[12u32] into r331;
    assert.eq r331 true;
    is.eq r10.cards2[12u32].index r306.perm2[12u32] into r332;
    assert.eq r332 true;
    is.eq r10.cards1[13u32].index r306.perm1[13u32] into r333;
    assert.eq r333 true;
    is.eq r10.cards2[13u32].index r306.perm2[13u32] into r334;
    assert.eq r334 true;
    is.eq r10.cards1[14u32].index r306.perm1[14u32] into r335;
    assert.eq r335 true;
    is.eq r10.cards2[14u32].index r306.perm2[14u32] into r336;
    assert.eq r336 true;
    is.eq r10.cards1[15u32].index r306.perm1[15u32] into r337;
    assert.eq r337 true;
    is.eq r10.cards2[15u32].index r306.perm2[15u32] into r338;
    assert.eq r338 true;
    is.eq r10.cards1[16u32].index r306.perm1[16u32] into r339;
    assert.eq r339 true;
    is.eq r10.cards2[16u32].index r306.perm2[16u32] into r340;
    assert.eq r340 true;
    is.eq r10.cards1[17u32].index r306.perm1[17u32] into r341;
    assert.eq r341 true;
    is.eq r10.cards2[17u32].index r306.perm2[17u32] into r342;
    assert.eq r342 true;
    is.eq r10.cards1[18u32].index r306.perm1[18u32] into r343;
    assert.eq r343 true;
    is.eq r10.cards2[18u32].index r306.perm2[18u32] into r344;
    assert.eq r344 true;
    is.eq r10.cards1[19u32].index r306.perm1[19u32] into r345;
    assert.eq r345 true;
    is.eq r10.cards2[19u32].index r306.perm2[19u32] into r346;
    assert.eq r346 true;
    is.eq r10.cards1[20u32].index r306.perm1[20u32] into r347;
    assert.eq r347 true;
    is.eq r10.cards2[20u32].index r306.perm2[20u32] into r348;
    assert.eq r348 true;
    is.eq r10.cards1[21u32].index r306.perm1[21u32] into r349;
    assert.eq r349 true;
    is.eq r10.cards2[21u32].index r306.perm2[21u32] into r350;
    assert.eq r350 true;
    is.eq r10.cards1[22u32].index r306.perm1[22u32] into r351;
    assert.eq r351 true;
    is.eq r10.cards2[22u32].index r306.perm2[22u32] into r352;
    assert.eq r352 true;
    is.eq r10.cards1[23u32].index r306.perm1[23u32] into r353;
    assert.eq r353 true;
    is.eq r10.cards2[23u32].index r306.perm2[23u32] into r354;
    assert.eq r354 true;
    is.eq r10.cards1[24u32].index r306.perm1[24u32] into r355;
    assert.eq r355 true;
    is.eq r10.cards2[24u32].index r306.perm2[24u32] into r356;
    assert.eq r356 true;
    is.eq r10.cards1[25u32].index r306.perm1[25u32] into r357;
    assert.eq r357 true;
    is.eq r10.cards2[25u32].index r306.perm2[25u32] into r358;
    assert.eq r358 true;
    cast  r2.seat_owner r4.seat_owner r6.seat_owner r8.seat_owner into r359 as [address; 4u32];
    cast r0.room_id r10 0u8 r359 into r360 as HouseDealerState;
    cast r360.room_id r360.deck 8u8 r360.player_addresses into r361 as HouseDealerState;
    cast  r360.deck.cards1[0u32] r360.deck.cards1[1u32] into r362 as [Card; 2u32];
    cast r360.player_addresses[0u32] r362 into r363 as PlayerHand.record;
    cast  r360.deck.cards1[2u32] r360.deck.cards1[3u32] into r364 as [Card; 2u32];
    cast r360.player_addresses[1u32] r364 into r365 as PlayerHand.record;
    cast  r360.deck.cards1[4u32] r360.deck.cards1[5u32] into r366 as [Card; 2u32];
    cast r360.player_addresses[2u32] r366 into r367 as PlayerHand.record;
    cast  r360.deck.cards1[6u32] r360.deck.cards1[7u32] into r368 as [Card; 2u32];
    cast r360.player_addresses[3u32] r368 into r369 as PlayerHand.record;
    cast self.caller r361 into r370 as HouseDealerStateRecord.record;
    output r370 as HouseDealerStateRecord.record;
    output r363 as PlayerHand.record;
    output r365 as PlayerHand.record;
    output r367 as PlayerHand.record;
    output r369 as PlayerHand.record;

function house_dealer_deal_flop:
    input r0 as HouseDealerState.private;
    input r1 as address.private;
    is.eq r0.next_card_index 8u8 into r2;
    assert.eq r2 true;
    cast r0.room_id r0.deck 12u8 r0.player_addresses into r3 as HouseDealerState;
    cast  r0.deck.cards1[9u32] r0.deck.cards1[10u32] r0.deck.cards1[11u32] into r4 as [Card; 3u32];
    cast r1 r4 r0.room_id true into r5 as DealtThreeCommunityCards.record;
    output r3 as HouseDealerState.private;
    output r5 as DealtThreeCommunityCards.record;

function house_dealer_deal_turn:
    input r0 as HouseDealerState.private;
    input r1 as address.private;
    is.eq r0.next_card_index 12u8 into r2;
    assert.eq r2 true;
    cast r0.room_id r0.deck 14u8 r0.player_addresses into r3 as HouseDealerState;
    cast r1 r0.deck.cards1[13u32] true r0.room_id into r4 as DealtOneCommunityCard.record;
    output r3 as HouseDealerState.private;
    output r4 as DealtOneCommunityCard.record;

function house_dealer_deal_river:
    input r0 as HouseDealerState.private;
    input r1 as address.private;
    is.eq r0.next_card_index 14u8 into r2;
    assert.eq r2 true;
    cast r0.room_id r0.deck 16u8 r0.player_addresses into r3 as HouseDealerState;
    cast r1 r0.deck.cards1[15u32] false r0.room_id into r4 as DealtOneCommunityCard.record;
    output r3 as HouseDealerState.private;
    output r4 as DealtOneCommunityCard.record;
